{"version":3,"sources":["Selected.tsx","Selector.tsx","Setting.tsx","Configure.tsx","DataDrivenParameter.tsx","Home.tsx","index.tsx"],"names":["Selected","props","react","className","selecting","selected","tableau_ui_min","onClick","onClear","style","visibility","nextConfig","marginLeft","displayName","Selector","dropdownSelectProps","disabled","enabled","kind","onChange","onSelect","value","buttonProps","list","map","option","key","dashboard","Setting","config","Selected_Selected","Selector_Selector","renderSelectElement","parameter","Loading","Configure","state","autoUpdate","bg","configured","dataType","delimiter","field","field_config","field_enabled","field_list","ignoreSelection","includeAllValue","multiselect","param_config","param_enabled","param_list","sort","txt","useFormattedValues","worksheet","ws_config","ws_enabled","ws_list","bgChange","color","_this","setState","target","txtChange","paramChange","e","fieldChange","wsChange","ignoreSelectionChange","checked","aliasChange","allChange","sortChange","delimiterChange","multiselectChange","autoUpdateChange","setParam","findParameterAsync","then","param","populateWS","clearParam","populateParamList","setWS","populateFieldList","clearWS","setField","clearField","submit","window","tableau","extensions","settings","set","saveAsync","ui","closeDialog","clearSettings","_this2","this","getAll","selParam","allowableValues","type","name","testWSSettings","_this3","getParametersAsync","params","dropdownList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","p","push","err","return","length","worksheets","find","ws","selWorksheet","testFieldSettings","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_this4","w","getSummaryDataAsync","dataTable","columns","column","fieldName","selField","_this5","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","f","_this6","initializeDialogAsync","dashboardContent","testParamSettings","xmlns","id","width","height","viewBox","x","y","fillRule","clipRule","fill","d","marginTop","Setting_Setting","flexGrow","margin","marginRight","children","maxLength","backgroundColor","href","rel","React","NeedsConfiguring","fakeWhiteOverlay","hex","rgb","result","exec","b","parseInt","g","r","hexToRgb","concat","Math","min","floor","DataDrivenParameter","currentVal","firstInit","configure","popupUrl","location","origin","includes","displayDialogAsync","closePayload","document","body","findParameter","catch","error","get","errorCode","ErrorCodes","DialogClosedByUser","console","log","message","getParamData","populateParam","updateParam","newValue","values","options","opt","join","changeValueAsync","setupWsEvent","data","row","index","formattedValue","filter","item","inputArray","indexOf","reverse","Number","a","unshift","toString","currentValue","addEventListener","TableauEventType","FilterChanged","MarkSelectionChanged","initializeAsync","display","multiple","Home","PrimaryLayout","react_router","path","exact","component","App","react_router_dom","src_PrimaryLayout","ReactDOM","src_App","getElementById"],"mappings":"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","file":"static/js/main.ae08df8d.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport { Button } from '@tableau/tableau-ui';\n\ndeclare global {\n    interface Window { tableau: any; }\n}\n\nexport interface SelectedProps {\n    nextConfig?: boolean;\n    onClear: () => void;\n    selected: string;\n    selecting: string;\n}\n\n// An individual setting that has been set\nexport const Selected: React.SFC<SelectedProps> = (props) => {\n    return (\n        <div className='selected'>\n            <p><i>The {props.selecting} <b>{props.selected}</b> has been selected</i></p>\n            <Button onClick={props.onClear} style={{ visibility: props.nextConfig ? 'hidden' : 'visible', marginLeft: '12px' }}>Clear</Button>\n        </div>\n    );\n};\n\nSelected.displayName = 'Selected';\n","import * as React from 'react';\n\nimport { Button, ButtonProps, DropdownSelect, DropdownSelectProps  } from '@tableau/tableau-ui';\n\nexport interface SelectorProps {\n    enabled: boolean;\n    list: string[];\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n    onClick: () => void;\n    selected: string;\n}\n\n// Shows if setting has not yet been configured\nexport const Selector: React.SFC<SelectorProps> = (props) => {\n    const dropdownSelectProps: DropdownSelectProps = {\n        className: 'dropdown-select',\n        disabled: !props.enabled,\n        kind: 'line',\n        onChange: props.onChange,\n        onSelect: props.onChange,\n        value: props.selected,\n    };\n\n    const buttonProps: ButtonProps = {\n        disabled: !props.enabled || props.selected === '',\n        kind: 'filledGreen',\n        onClick: props.onClick,\n        style: { marginLeft: '12px' },\n    };\n\n    return (\n        <div className='selector'>\n            <DropdownSelect {...dropdownSelectProps}>\n                {props.list.map(option => <option key={option}>{option}</option>)}\n            </DropdownSelect>\n            <Button {...buttonProps}>Set</Button>\n        </div>\n    );\n};\n\nSelector.displayName = 'Selector';\n","import * as React from 'react';\nimport { Selected } from './Selected';\nimport { Selector } from './Selector';\n\ndeclare global {\n    interface Window { tableau: any; }\n}\n\nexport interface SettingProps {\n    config: boolean;\n    enabled: boolean;\n    list: string[];\n    nextConfig?: boolean;\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n    onClear: () => void;\n    onClick: () => void;\n    selected: string;\n    selecting: string;\n}\n\nexport const Setting: React.SFC<SettingProps> = (props) => {\n    return (\n        <React.Fragment>\n            <span>Select a {props.selecting}</span>\n            {renderSelectElement(props)}\n        </React.Fragment>\n    );\n};\n\nSetting.displayName = 'Setting';\n\nfunction renderSelectElement(props: SettingProps): JSX.Element {\n    const { config, enabled, list, nextConfig, onChange, onClear, onClick, selected, selecting } = props;\n\n    return config ? <Selected nextConfig={nextConfig} onClear={onClear} selected={selected} selecting={selecting} /> :\n                    <Selector enabled={enabled} list={list} onChange={onChange} onClick={onClick} selected={selected} />;\n}\n","import * as React from 'react';\n\nimport { Button, Checkbox, Radio, TextField } from '@tableau/tableau-ui';\nimport { Setting } from './Setting';\n\n/* tslint:disable:no-console */\n\ndeclare global {\n    interface Window { tableau: any; }\n}\n\nlet dashboard: any;\n\ninterface State {\n    autoUpdate: boolean,\n    bg: string,\n    configured: boolean,\n    dataType: string,\n    delimiter: string,\n    field: string,\n    field_config: boolean,\n    field_enabled: boolean,\n    field_list: string[],\n    ignoreSelection: boolean,\n    includeAllValue: boolean,\n    multiselect: boolean,\n    param_config: boolean,\n    param_enabled: boolean,\n    param_list: string[],\n    parameter: string,\n    sort: string,\n    txt: string,\n    useFormattedValues: boolean,\n    worksheet: string,\n    ws_config: boolean,\n    ws_enabled: boolean,\n    ws_list: string[],\n}\n\nconst Loading: string = 'Loading...';\nconst NoFieldsFound: string = 'No fields found that match parameter!';\nconst NoWorksheetsFound: string = 'No worksheets found!';\nconst NoParametersFound: string = 'No open input parameters found!';\n\nclass Configure extends React.Component<any, State> {\n    public readonly state: State = {\n        autoUpdate: false,\n        bg: '#ffffff',\n        configured: false,\n        dataType: 'string',\n        delimiter: '|',\n        field: '',\n        field_config: false,\n        field_enabled: false,\n        field_list: [],\n        ignoreSelection: false,\n        includeAllValue: false,\n        multiselect: false,\n        param_config: false,\n        param_enabled: false,\n        param_list: [],\n        parameter: '',\n        sort: 'asc',\n        txt: '#000000',\n        useFormattedValues: false,\n        worksheet: '',\n        ws_config: false,\n        ws_enabled: false,\n        ws_list: [],\n    };\n\n    // Handles change in background color input\n    public bgChange = (color: any): void => {\n        this.setState({ bg: color.target.value });\n    };\n\n    // Handles change in text color input\n    public txtChange = (color: any): void => {\n        this.setState({ txt: color.target.value });\n    };\n\n    // Handles selection in parameter dropdown\n    public paramChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n        this.setState({ parameter: e.target.value });\n    };\n\n    // Handles selection in field dropdown\n    public fieldChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n        this.setState({ field: e.target.value });\n    };\n\n    // Handles selection in worksheet dropdown\n    public wsChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n        this.setState({ worksheet: e.target.value });\n    };\n\n    // Handles change in ignoreSelection checkbox\n    public ignoreSelectionChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ ignoreSelection: !e.target.checked });\n    };\n\n    // Handles change in useFormattedValues checkbox\n    public aliasChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ useFormattedValues: e.target.checked });\n    };\n\n    // Handles change in \"(All)\" checkbox\n    public allChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ includeAllValue: e.target.checked });\n    };\n\n    // Handles change in sort checkbox\n    public sortChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ sort: e.target.value });\n    };\n\n    // Handles change in delimiter textbox\n    public delimiterChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ delimiter: e.target.value });\n    };\n\n    // Handles change in multiselect checkbox\n    public multiselectChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ multiselect: e.target.checked });\n    };\n\n    // Handles change in auto update checkbox\n    public autoUpdateChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ autoUpdate: e.target.checked });\n    };\n\n    // Tests if extension is configured and if so, if the parameter in settings exists and accepts all values\n    public testParamSettings() {\n        const settings = window.tableau.extensions.settings.getAll();\n        if (this.state.configured) {\n            dashboard.findParameterAsync(settings.selParam).then((param: any) => {\n                if (param && param.allowableValues.type === 'all') {\n                    this.setState({\n                        dataType: param.dataType,\n                        param_config: true,\n                        parameter: param.name,\n                    });\n                    this.testWSSettings();\n                } else {\n                    this.populateParamList();\n                    this.setState({ configured: false });\n                }\n            })\n        } else {\n            this.populateParamList();\n        }\n    }\n\n    // Gets list of parameters in workbook and populates dropdown\n    public populateParamList() {\n        this.setState({\n            param_list: [Loading],\n            parameter: Loading,\n        });\n        dashboard.getParametersAsync().then((params: any) => {\n            const dropdownList: string[] = [];\n            for (const p of params) {\n                if (p.allowableValues.type === 'all') {\n                    dropdownList.push(p.name);\n                }\n            }\n            if (dropdownList.length > 0) {\n                this.setState({\n                    param_enabled: true,\n                    param_list: dropdownList,\n                    parameter: dropdownList[0],\n                });\n            } else {\n                this.setState({\n                    param_enabled: false,\n                    param_list: [NoParametersFound],\n                    parameter: NoParametersFound,\n                });\n            }\n        });\n    }\n\n    // Sets which tableau parameter to update\n    public setParam = (): void => {\n        if (this.state.parameter !== '') {\n            dashboard.findParameterAsync(this.state.parameter).then((param: any) => {\n                this.setState({ \n                    dataType: param.dataType,\n                    includeAllValue: (param.dataType === 'string' ? this.state.includeAllValue : false),\n                    multiselect: (param.dataType === 'string' ? this.state.multiselect : false),\n                    param_config: true,\n                });\n                this.populateWS();\n            });\n        }\n    }\n\n    // Clears setting for which tableau parameter to update\n    public clearParam = (): void => {\n        this.setState({\n            param_config: false,\n            param_enabled: true,\n            ws_enabled: false,\n        });\n        this.populateParamList();\n    }\n\n    // Tests if extension is configured and if so, if the worksheet in settings exists\n    public testWSSettings() {\n        const settings = window.tableau.extensions.settings.getAll();\n        if (this.state.configured) {\n            if (dashboard.worksheets.find((ws: any) => ws.name === settings.selWorksheet)) {\n                this.setState({\n                    worksheet: settings.selWorksheet,\n                    ws_config: true,\n                    ws_enabled: false,\n                });\n                this.testFieldSettings();\n            } else {\n                this.populateWS();\n                this.setState({ configured: false });\n            }\n        } else {\n            this.populateWS();\n        }\n    }\n\n    // Gets list of worksheets in dashboard and populates dropdown\n    public populateWS() {\n        this.setState({\n            worksheet: Loading,\n            ws_list: [Loading],\n        });\n        const dropdownList: string[] = [];\n        for (const ws of dashboard.worksheets) {\n            dropdownList.push(ws.name);\n        }\n        if (dropdownList.length > 0) {\n            this.setState({\n                worksheet: dropdownList[0],\n                ws_enabled: true,\n                ws_list: dropdownList,\n            });\n        } else {\n            this.setState({\n                worksheet: NoWorksheetsFound,\n                ws_enabled: false,\n                ws_list: [NoWorksheetsFound],\n            });\n        }\n    }\n\n    // Sets which worksheet to use for filters\n    public setWS = (): void => {\n        if (this.state.worksheet !== '') {\n            this.setState({ ws_config: true });\n            this.populateFieldList();\n        }\n    }\n\n    // Clears setting for which worksheet to use for filters\n    public clearWS = (): void => {\n        this.setState({\n            field_enabled: false,\n            ws_config: false,\n            ws_enabled: true,\n        });\n        this.populateWS();\n    }\n\n    // Tests if extension is configued and if so, if the field in settings exists on the selected worksheet\n    public testFieldSettings() {\n        const settings = window.tableau.extensions.settings.getAll();\n        if (this.state.configured) {\n            dashboard.worksheets.find((w: any) => w.name === this.state.worksheet).getSummaryDataAsync().then((dataTable: any) => {\n                if (dataTable.columns.find((column: any) => column.fieldName === settings.selField)) {\n                    this.setState({\n                        configured: true,\n                        field: settings.selField,\n                        field_config: true,\n                        field_enabled: false,\n                    });\n                } else {\n                    this.populateFieldList();\n                    this.setState({ configured: false });\n                }\n            });\n        } else {\n            this.populateFieldList();\n        }\n    }\n\n    // Gets list of fields in previously selected worksheet's data and populates dropdown\n    public populateFieldList() {\n        this.setState({\n            field: Loading,\n            field_list: [Loading],\n        });\n        let dataType: string;\n        dashboard.findParameterAsync(this.state.parameter).then((param: any) => {\n            dataType = param.dataType;\n            return dashboard.worksheets.find((w: any) => w.name === this.state.worksheet).getSummaryDataAsync();\n        })\n            .then((dataTable: any) => {\n                const dropdownList: string[] = [];\n                for (const f of dataTable.columns) {\n                    if (f.dataType === dataType) {\n                        dropdownList.push(f.fieldName);\n                    }\n                }\n                if (dropdownList.length > 0) {\n                    this.setState({\n                        field: dropdownList[0],\n                        field_enabled: true,\n                        field_list: dropdownList,\n                    });\n                } else {\n                    this.setState({\n                        field: NoFieldsFound,\n                        field_enabled: false,\n                        field_list: [NoFieldsFound],\n                    });\n                }\n            });\n    }\n\n    // Sets the field to pull values from for Data-Driven Parameter\n    public setField = (): void => {\n        if (this.state.field !== '') {\n            this.setState({\n                configured: true,\n                field_config: true,\n            });\n        }\n    }\n\n    // Clears the field to pull values from for Data-Driven Parameter\n    public clearField = (): void => {\n        this.setState({\n            configured: false,\n            field_config: false,\n            field_enabled: true,\n        });\n        this.populateFieldList();\n    }\n\n    // Saves settings and closes configure dialog\n    public submit = (): void => {\n        window.tableau.extensions.settings.set('selParam', this.state.parameter);\n        window.tableau.extensions.settings.set('selWorksheet', this.state.worksheet);\n        window.tableau.extensions.settings.set('selField', this.state.field);\n        window.tableau.extensions.settings.set('bg', this.state.bg);\n        window.tableau.extensions.settings.set('txt', this.state.txt);\n        window.tableau.extensions.settings.set('sort', this.state.sort);\n        window.tableau.extensions.settings.set('ignoreSelection', this.state.ignoreSelection);\n        window.tableau.extensions.settings.set('useFormattedValues', this.state.useFormattedValues);\n        window.tableau.extensions.settings.set('includeAllValue', (this.state.dataType !== 'string' ? 'false' : this.state.includeAllValue));\n        window.tableau.extensions.settings.set('delimiter', this.state.delimiter);\n        window.tableau.extensions.settings.set('multiselect', (this.state.dataType !== 'string' ? 'false' : this.state.multiselect));\n        window.tableau.extensions.settings.set('autoUpdate', this.state.autoUpdate);\n        window.tableau.extensions.settings.set('dataType', this.state.dataType || 'string');\n        window.tableau.extensions.settings.set('configured', 'true');\n        window.tableau.extensions.settings.saveAsync().then(() => {\n            window.tableau.extensions.ui.closeDialog(this.state.worksheet);\n        });\n    }\n\n    // Clears settings and states\n    public clearSettings = (): void => {\n        this.setState({\n            configured: false,\n            field: '',\n            field_config: false,\n            field_enabled: false,\n            field_list: [],\n            param_config: false,\n            param_list: [],\n            parameter: '',\n            worksheet: '',\n            ws_config: false,\n            ws_enabled: false,\n            ws_list: [],\n        });\n        this.populateParamList();\n    }\n\n    // Once we have mounted, we call to initialize\n    public componentWillMount() {\n        window.tableau.extensions.initializeDialogAsync().then(() => {\n            dashboard = window.tableau.extensions.dashboardContent.dashboard;\n            const settings = window.tableau.extensions.settings.getAll();\n            if (settings.configured === 'true') {\n                this.setState({\n                    autoUpdate: settings.autoUpdate === 'true' || false,\n                    bg: settings.bg || '#ffffff',\n                    configured: true,\n                    dataType: settings.dataType,\n                    delimiter: settings.delimiter || '|',\n                    ignoreSelection: settings.ignoreSelection === 'true' || false,\n                    includeAllValue: settings.includeAllValue === 'true' || false,\n                    multiselect: settings.multiselect === 'true' || false,\n                    sort: settings.sort || 'asc',\n                    txt: settings.txt || '#000000',\n                    useFormattedValues: settings.useFormattedValues === 'true' || false,\n                });\n                this.testParamSettings();\n            } else {\n                this.populateParamList();\n            }\n        });\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <div className='container'>\n                    <div>\n                        <div className='header'>\n                            Data-Driven Parameter Configuration\n                            <div className='tooltip'>\n                                <svg xmlns='http://www.w3.org/2000/svg' id='Dialogs_x5F_Info' width='15' height='15' viewBox='0 0 15 15'>\n                                    <rect id='Line' x='7' y='6' width='1' height='5' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\n                                    <rect id='Dot_2_' x='7' y='4' width='1' height='1' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\n                                    <path id='Circle' d='M7.5,1C3.9,1,1,3.9,1,7.5S3.9,14,7.5,14 S14,11.1,14,7.5S11.1,1,7.5,1z M7.5,13C4.5,13,2,10.5,2,7.5C2,4.5,4.5,2,7.5,2S13,4.5,13,7.5C13,10.5,10.5,13,7.5,13z' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\n                                </svg>\n                                <span className='tooltiptext'>\n                                    <b>How to Use</b>\n                                    <ol>\n                                        <li>Select a Tableau parameter to manipulate. This parameter must already exists and must allow \"all\" values.</li>\n                                        <li>Select a worksheet with the data you want to use in your parameter.</li>\n                                        <li>Select a field to use to populate the parameter. Field data type must match the data type of parameter.</li>\n                                    </ol>\n                                    <br/>\n                                    <p>Note: Mac Desktop 2018.3 and lower, please use arrow keys and 'Enter' to select options</p>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div className='title' style={{marginTop: '18px'}}>Configure Parameter</div>\n                        <div className='content'>                      \n                            <Setting selecting='parameter' onClick={this.setParam} onClear={this.clearParam} config={this.state.param_config} nextConfig={this.state.ws_config} selected={this.state.parameter} enabled={this.state.param_enabled && !this.state.param_config} list={this.state.param_list} onChange={this.paramChange} />\n                            <Setting selecting='worksheet' onClick={this.setWS} onClear={this.clearWS} config={this.state.ws_config} nextConfig={this.state.field_config} selected={this.state.worksheet} enabled={this.state.ws_enabled} list={this.state.ws_list} onChange={this.wsChange} />\n                            <Setting selecting='field' onClick={this.setField} onClear={this.clearField} config={this.state.field_config} selected={this.state.field} enabled={this.state.field_enabled} list={this.state.field_list} onChange={this.fieldChange} />\n                        </div>\n\n                        <div className='title'>Options</div>\n                        <div className='content'>\n                            <div className='option'>\n                                <Checkbox checked={!this.state.ignoreSelection} onChange={this.ignoreSelectionChange} style={{ flexGrow: 1}}>Filter parameter list based on worksheet selections</Checkbox>\n                            </div>\n                            <div className='option'>\n                                <Checkbox checked={this.state.useFormattedValues} onChange={this.aliasChange} style={{ flexGrow: 1}}>Use aliased values</Checkbox>\n                            </div>\n                            <div className='option'>\n                                <Checkbox checked={this.state.autoUpdate} onChange={this.autoUpdateChange} style={{ flexGrow: 1}}>Automatically reset values on load.</Checkbox>\n                            </div>\n                            <div className='option'>\n                                Sorting: \n                                <Radio checked={this.state.sort === 'asc'} onChange={this.sortChange} name='sorting' value='asc' style={{ margin: '0px 12px'}}>Ascending (A-Z)</Radio>\n                                <Radio checked={this.state.sort === 'desc'} onChange={this.sortChange} name='sorting' value='desc' style={{ margin: '0px 12px'}}>Descending (Z-A)</Radio>\n                            </div>\n                            <div className='option'>\n                                <p><i>For use with string parameters only:</i></p>\n                            </div>\n                            <div className='option'>\n                                <Checkbox disabled={this.state.dataType !== 'string'} checked={this.state.includeAllValue} onChange={this.allChange} style={{ flexGrow: 1}}>Include \"(All)\" in parameter list <br/> <i>Note: This is only a placeholder for calculations.</i></Checkbox>\n                            </div>\n                            <div className='option'>\n                                <Checkbox disabled={this.state.dataType !== 'string'} checked={this.state.multiselect} onChange={this.multiselectChange} style={{ marginRight: '10px'}}>Allow for multiple selections.</Checkbox>\n                                <span children='Delimiter:' style={{ marginRight: '5px' }} />\n                                <TextField kind='line' onChange={this.delimiterChange} className='delimiter-text-field' value={this.state.delimiter} disabled={!this.state.multiselect || this.state.dataType !== 'string'} maxLength={1} style={{ width: 20 }} />\n                            </div>\n                        </div>\n\n                        <div className='title'>Formatting</div>\n                        <div className='content'>\n                            <div className='format'>\n                                <div className='formattext'>Background Color</div>\n                                <div>\n                                    <input type='color' value={this.state.bg} onChange={this.bgChange} style={{ backgroundColor: this.state.bg }} />\n                                </div>\n                            </div>\n                            <div className='format'>\n                                <div className='formattext'>Text Color</div>\n                                <div>\n                                    <input type='color' value={this.state.txt} onChange={this.txtChange} style={{ backgroundColor: this.state.txt }} />\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div className='footer'>\n                        <div className='btncluster'>\n                            <Button onClick={this.clearSettings} style={{ marginRight: 'auto' }}>Clear Settings</Button>\n                            <a href='https://extensiongallery.tableau.com/products/27' target='_blank' rel='noopener noreferrer'>Version 2.0 available</a>\n                            <Button kind='filledGreen' onClick={this.submit} disabled={!this.state.configured || !this.state.ws_config} style={{ marginLeft: '12px' }}>OK</Button>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Configure;","import * as React from 'react';\nimport './style.css';\n\n/* tslint:disable:no-console */\nimport { DropdownSelect } from '@tableau/tableau-ui';\n\ndeclare global {\n    interface Window { tableau: any; }\n}\n\nlet dashboard: any;\nlet parameter: any;\n\ninterface State {\n    bg: string,\n    configured: boolean,\n    currentVal: any[],\n    disabled: boolean,\n    firstInit: boolean,\n    list: any,\n    multiselect: boolean,\n}\n\nconst NeedsConfiguring: string = 'Parameter needs configuration';\n\nfunction fakeWhiteOverlay(hex: string) {\n    const rgb = hexToRgb(hex);\n    if (rgb) {\n        return `rgb(${Math.min(Math.floor(rgb.r / 2) + 127, 255)}, ${Math.min(Math.floor(rgb.g / 2) + 127, 255)}, ${Math.min(Math.floor(rgb.b / 2) + 127, 255)})`;\n    } else {\n        return '#ffffff';\n    }\n}\n\nfunction hexToRgb(hex: string) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        b: parseInt(result[3], 16),\n        g: parseInt(result[2], 16),\n        r: parseInt(result[1], 16),\n    } : null;\n}\n\nclass DataDrivenParameter extends React.Component<any, State> {\n    public readonly state: State = {\n        bg: '#ffffff',\n        configured: false,\n        currentVal: [NeedsConfiguring],\n        disabled: true,\n        firstInit: true,\n        list: [NeedsConfiguring],\n        multiselect: false,\n    };\n\n    // Pops open the configure page\n    public configure = (): void => {\n        const popupUrl = (window.location.origin.includes('localhost')) ? `${window.location.origin}/#/config` : `${window.location.origin}/extension-data-driven-parameters/#/config`;\n        const payload = '';\n        window.tableau.extensions.ui.displayDialogAsync(popupUrl, payload, { height: 700, width: 450 }).then((closePayload: string) => {\n            const settings = window.tableau.extensions.settings.getAll();\n            if (closePayload !== '') {\n                document.body.style.backgroundColor = settings.bg;\n                document.body.style.color = settings.txt;\n                this.setState({ \n                    bg: (settings.bg ? fakeWhiteOverlay(settings.bg) : '#ffffff'),\n                    multiselect: settings.multiselect === 'true',\n                });\n                this.findParameter();\n            } else {\n                this.setState({\n                    currentVal: [NeedsConfiguring],\n                    disabled: true,\n                    list: [NeedsConfiguring],\n                });\n            }\n        }).catch((error: any) => {\n            if (window.tableau.extensions.settings.get('configured') !== 'true') {\n                this.setState({\n                    currentVal: [NeedsConfiguring],\n                    disabled: true,\n                    list: [NeedsConfiguring],\n                });\n            }\n            switch (error.errorCode) {\n                case window.tableau.ErrorCodes.DialogClosedByUser:\n                    console.log('Dialog was closed by user.');\n                    break;\n                default:\n                    console.error(error.message);\n            }\n        });\n    }\n\n    // Locates the parameter to update\n    public findParameter() {\n        const settings = window.tableau.extensions.settings.getAll();\n        window.tableau.extensions.dashboardContent.dashboard.findParameterAsync(settings.selParam).then((param: any) => {\n            parameter = param;\n            if (!parameter || parameter.allowableValues.type !== 'all') {\n                this.setState({\n                    currentVal: [NeedsConfiguring],\n                    disabled: true,\n                    list: [NeedsConfiguring],\n                });\n            } else {\n                this.getParamData();\n                this.setupWsEvent();\n            }\n        });\n    }\n\n    // Gets the values from the selected field and populates the Data-Driven Parameter\n    public getParamData = (): void => {\n        const settings = window.tableau.extensions.settings.getAll();\n        const worksheet = dashboard.worksheets.find((ws: any) => ws.name === settings.selWorksheet);\n        if (!worksheet) {\n            this.setState({\n                currentVal: [NeedsConfiguring],\n                disabled: true,\n                list: [NeedsConfiguring],\n            });\n        } else {\n            worksheet.getSummaryDataAsync({ ignoreSelection: settings.ignoreSelection === 'true' }).then((dataTable: any) => {\n                this.populateParam(dataTable);\n            });\n        }\n    }\n\n    // Pulls domain of selected field\n    public populateParam(dataTable: any) {\n        const settings = window.tableau.extensions.settings.getAll();\n        const field = dataTable.columns.find((column: any) => column.fieldName === settings.selField);\n        if (!field) {\n            this.setState({\n                currentVal: [NeedsConfiguring],\n                disabled: true,\n                list: [NeedsConfiguring],\n            });\n        } else {\n            let list = [];\n            // Populate list with values from data source\n            for (const row of dataTable.data) {\n                list.push((settings.useFormattedValues === 'true' ? row[field.index].formattedValue : row[field.index].value));\n            }\n\n            // Remove duplicates\n            list = list.filter((item, index, inputArray) => {\n                return inputArray.indexOf(item) === index;\n            });\n            \n            if(settings.dataType && (settings.dataType === 'int' || settings.dataType === 'float')) {\n                list = list.map(Number);\n                // Sort according to settings (numerical)\n                if (settings.sort && settings.sort === 'desc') {\n                    list.sort((a, b) => b - a);\n                } else {\n                    list.sort((a, b) => a - b);\n                }\n            } else {\n                // Sort according to settings\n                if (settings.sort && settings.sort === 'desc') {\n                    list.sort();\n                    list.reverse();\n                } else {\n                    list.sort();\n                }\n            }\n            \n            // Add '(All)' according to settings\n            if (settings.includeAllValue === 'true') {\n                list.unshift('(All)');\n            }\n\n            let currentVal;\n            // Determine wether to use current param value or first value of list based on settings and if current Tableau parameter value is in list\n            if ((settings.autoUpdate === 'false' || (settings.autoUpdate === 'true' && !this.state.firstInit)) && list.find(item => item.toString() === parameter.currentValue.value.toString())) {\n                currentVal = parameter.currentValue.value;\n            } else {\n                currentVal = (settings.includeAllValue === 'true' ? list[1] : list[0]);\n            }\n\n            this.setState({\n                currentVal: [currentVal],\n                disabled: false,\n                firstInit: false,\n                list,\n            });\n            \n            parameter.changeValueAsync(currentVal);\n        }\n    }\n\n    // Adds event listener to worksheet\n    public setupWsEvent() {\n        const settings = window.tableau.extensions.settings.getAll();\n        const worksheet = dashboard.worksheets.find((ws: any) => ws.name === settings.selWorksheet);\n        if (!worksheet) {\n            this.setState({\n                currentVal: [NeedsConfiguring],\n                disabled: true,\n                list: [NeedsConfiguring],\n            });\n        } else {\n            worksheet.addEventListener(window.tableau.TableauEventType.FilterChanged, this.getParamData);\n            worksheet.addEventListener(window.tableau.TableauEventType.MarkSelectionChanged, this.getParamData);\n        }\n    }\n\n    // Updates the parameter based on selection in Data-Driven Parameter\n    public updateParam = (e: any) => {\n        const settings = window.tableau.extensions.settings.getAll();\n        const values = [];\n        let newValue;\n        for (const opt of e.target.options) {\n            if (opt.selected) {\n            values.push(opt.value);\n            }\n        }\n        newValue = values.join(settings.delimiter);\n\n        if (!parameter) {\n            this.setState({\n                currentVal: [NeedsConfiguring],\n                disabled: true,\n                list: [NeedsConfiguring],\n            });\n        } else {\n            parameter.changeValueAsync(newValue);\n            this.setState({ currentVal: values }, () => {console.log(this.state.currentVal)});\n        }\n        // Include to refresh domain on every selection:\n        if (!this.state.multiselect){\n            this.getParamData();\n        }\n    }\n\n    // Once we have mounted, we call to initialize\n    public componentWillMount() {\n        window.tableau.extensions.initializeAsync({ configure: this.configure }).then(() => {\n            dashboard = window.tableau.extensions.dashboardContent.dashboard;\n            const settings = window.tableau.extensions.settings.getAll();\n            if (settings.configured === 'true') {\n                document.body.style.backgroundColor = settings.bg;\n                document.body.style.color = settings.txt;\n                this.setState({\n                    bg: (settings.bg ? fakeWhiteOverlay(settings.bg) : '#ffffff'),\n                    configured: true,\n                    multiselect: settings.multiselect === 'true',\n                });\n                this.findParameter();\n            } else {\n                this.configure();\n            }\n        });\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <div style={{display: (this.state.multiselect ? 'flex' : 'none')}}>\n                    <select multiple={true} id='multi-select-parameter' className='parameter' value={this.state.currentVal} onChange={this.updateParam} disabled={this.state.disabled} style={{backgroundColor: this.state.bg, color: 'inherit' }}>\n                    {this.state.list.map( (option: any) => ( <option key={option} value={option}>{option}</option> ) )}\n                </select>\n                </div>\n                <div style={{display: (!this.state.multiselect ? 'flex' : 'none')}}>\n                    <DropdownSelect id='single-select-parameter' className='singleParameter' disabled={this.state.disabled || this.state.multiselect} kind='outline' onChange={this.updateParam} value={this.state.currentVal[0]} style={{ backgroundColor: this.state.bg, color: 'inherit' }}>\n                        {this.state.list.map((option: string) => <option key={option}>{option}</option>)}\n                    </DropdownSelect>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default DataDrivenParameter;","import * as React from 'react';\nimport './home.css';\n\nclass Home extends React.Component<any, any> {\n    public render() {\n        return (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className='icontainer'>\n\t\t\t\t\t<div className='box'>\n\t\t\t\t\t\t<div className='left'>\n\t\t\t\t\t\t\t<h1 className='iheader'>Data-Driven Parameters</h1>\n\t\t\t\t\t\t\t<span className='tagline'>Automatically update your parameters based on your data!</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='right'>\n\t\t\t\t\t\t\t<h4 className='big'>What is it?</h4>\n\t\t\t\t\t\t\t<p>This extension allows you to add a parameter to a Tableau dashboard whose domain is based on your data. Added a new product line? No longer do you need to manually edit the parameter to update it, with this extension your parameter values\n\t\t\t\t\t\t\tupdate automatically!</p>\n\t\t\t\t\t\t\t<h4 className='big'>Using the Extension</h4>\n\t\t\t\t\t\t\t<ol>\n\t\t\t\t\t\t\t\t<li>Create an open input (All) parameter with a data type matching the field you want to use to populate it.</li>\n\t\t\t\t\t\t\t\t<li>Drag in a new Extension object to your dashboard.</li>\n\t\t\t\t\t\t\t\t<li>Find the manifest (.trex) file you downloaded above.</li>\n\t\t\t\t\t\t\t\t<li>Select the parameter you created above for the extension to manipulate.</li>\n\t\t\t\t\t\t\t\t<li>Select the worksheet that holds the field you want to base your parameter on.</li>\n\t\t\t\t\t\t\t\t<li>Select the field you want to base your parameter on.</li>\n\t\t\t\t\t\t\t\t<li>Optional: Configure your text and background colors.</li>\n\t\t\t\t\t\t\t\t<li>Click 'OK'.</li>\n\t\t\t\t\t\t\t</ol>\n\t\t\t\t\t\t\t<p><b>Note:</b> You can add as many instances of this extension as you like!</p>\n\t\t\t\t\t\t\t<div className='gh'>\n\t\t\t\t\t\t\t\tGet this extension and more in the <a href='https://extensiongallery.tableau.com/'>Extension Gallery</a>.\n\t\t\t\t\t\t\t\t{/* <a href='https://github.com/tableau/extension-data-driven-parameters'>View on GitHub</a> */}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n        );\n    }\n}\n\nexport default Home;","import 'react-app-polyfill/ie11';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Configure from './Configure';\nimport DataDrivenParameter from './DataDrivenParameter';\nimport Home from './Home';\n\nconst PrimaryLayout = () => (\n  <React.Fragment>\n      <Route path='/' exact={true} component={Home} />\n      <Route path='/parameter' component={DataDrivenParameter} />\n      <Route path='/config' component={Configure} />\n  </React.Fragment>\n)\n\nclass App extends React.Component {\n  public render() {\n      return (\n          <HashRouter>\n              <PrimaryLayout />\n          </HashRouter>\n      )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n"],"sourceRoot":""}