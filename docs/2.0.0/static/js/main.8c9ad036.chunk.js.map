{"version":3,"sources":["Selected.tsx","Selector.tsx","Setting.tsx","Configure.tsx","DataDrivenParameter.tsx","Home.tsx","index.tsx"],"names":["Selected","props","react","className","selecting","selected","tableau_ui_min","onClick","onClear","style","visibility","nextConfig","marginLeft","displayName","Selector","dropdownSelectProps","disabled","enabled","kind","onChange","onSelect","value","buttonProps","list","map","option","key","Setting","config","Selected_Selected","Selector_Selector","renderSelectElement","parameter","Loading","Configure","state","applyButton","autoUpdate","bg","configured","dataType","delimiter","displayField","field","field_config","field_enabled","field_list","ignoreSelection","includeAllValue","multiselect","param_config","param_enabled","param_list","selectedTabIndex","showDisplayValues","sort","txt","updateOnChange","useFormattedValues","worksheet","ws_config","ws_enabled","ws_list","bgChange","color","_this","setState","target","txtChange","paramChange","e","fieldChange","wsChange","ignoreSelectionChange","checked","aliasChange","allChange","sortChange","delimiterChange","multiselectChange","applyChange","autoUpdateChange","displayChange","displayFieldChange","updateOnChangeChange","tabChange","index","setParam","dashboard","window","tableau","extensions","dashboardContent","findParameterAsync","then","param","populateWS","clearParam","populateParamList","setWS","populateFieldList","clearWS","setField","worksheets","find","w","name","getSummaryDataAsync","dataTable","dropdownList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","columns","Symbol","iterator","next","done","f","push","fieldName","err","return","clearField","submit","settings","set","saveAsync","ui","closeDialog","clearSettings","_this2","this","getAll","selParam","allowableValues","type","testWSSettings","_this3","getParametersAsync","params","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","p","length","ws","selWorksheet","testFieldSettings","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_this4","column","selField","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_this5","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_this6","initializeDialogAsync","testParamSettings","panels","Setting_Setting","flexGrow","margin","marginRight","display","width","children","maxLength","backgroundColor","xmlns","id","height","viewBox","x","y","fillRule","clipRule","fill","d","activation","alignment","onTabChange","tabs","content","React","NeedsConfiguring","displayValue","fakeWhiteOverlay","hex","rgb","result","exec","b","parseInt","g","r","hexToRgb","concat","Math","min","floor","DataDrivenParameter","currentVal","firstInit","configure","popupUrl","location","origin","process","displayDialogAsync","closePayload","document","body","findParameter","catch","error","get","errorCode","ErrorCodes","DialogClosedByUser","console","log","message","getParamData","populateParam","updateParam","newValue","values","options","opt","join","changeValueAsync","apply","setupWsEvent","data","row","formattedValue","filter","item","array","indexOf","i","a","Number","toLocaleString","environment","locale","unshift","tablist","_loop","v","toString","currentValue","split","addEventListener","TableauEventType","FilterChanged","MarkSelectionChanged","initializeAsync","multi","flexDirection","multiple","marginTop","single","fontSize","Home","href","PrimaryLayout","react_router","path","exact","component","App","react_router_dom","src_PrimaryLayout","ReactDOM","src_App","getElementById"],"mappings":"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","file":"static/js/main.8c9ad036.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport { Button } from '@tableau/tableau-ui';\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\nexport interface SelectedProps {\r\n    nextConfig?: boolean;\r\n    onClear: () => void;\r\n    selected: string;\r\n    selecting: string;\r\n}\r\n\r\n// An individual setting that has been set\r\nexport const Selected: React.SFC<SelectedProps> = (props) => {\r\n    return (\r\n        <div className='selected'>\r\n            <p><i>The {props.selecting} <b>{props.selected}</b> has been selected</i></p>\r\n            <Button onClick={props.onClear} style={{ visibility: props.nextConfig ? 'hidden' : 'visible', marginLeft: '12px' }}>Clear</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nSelected.displayName = 'Selected';\r\n","import * as React from 'react';\r\n\r\nimport { Button, ButtonProps, DropdownSelect, DropdownSelectProps  } from '@tableau/tableau-ui';\r\n\r\nexport interface SelectorProps {\r\n    enabled: boolean;\r\n    list: string[];\r\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n    onClick: () => void;\r\n    selected: string;\r\n}\r\n\r\n// Shows if setting has not yet been configured\r\nexport const Selector: React.SFC<SelectorProps> = (props) => {\r\n    const dropdownSelectProps: DropdownSelectProps = {\r\n        className: 'dropdown-select',\r\n        disabled: !props.enabled,\r\n        kind: 'line',\r\n        onChange: props.onChange,\r\n        onSelect: props.onChange,\r\n        value: props.selected,\r\n    };\r\n\r\n    const buttonProps: ButtonProps = {\r\n        disabled: !props.enabled || props.selected === '',\r\n        kind: 'filledGreen',\r\n        onClick: props.onClick,\r\n        style: { marginLeft: '12px' },\r\n    };\r\n\r\n    return (\r\n        <div className='selector'>\r\n            <DropdownSelect {...dropdownSelectProps}>\r\n                {props.list.map(option => <option key={option}>{option}</option>)}\r\n            </DropdownSelect>\r\n            <Button {...buttonProps}>Set</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nSelector.displayName = 'Selector';\r\n","import * as React from 'react';\r\nimport { Selected } from './Selected';\r\nimport { Selector } from './Selector';\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\nexport interface SettingProps {\r\n    config: boolean;\r\n    enabled: boolean;\r\n    list: string[];\r\n    nextConfig?: boolean;\r\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n    onClear: () => void;\r\n    onClick: () => void;\r\n    selected: string;\r\n    selecting: string;\r\n}\r\n\r\nexport const Setting: React.SFC<SettingProps> = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <span>Select a {props.selecting}</span>\r\n            {renderSelectElement(props)}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nSetting.displayName = 'Setting';\r\n\r\nfunction renderSelectElement(props: SettingProps): JSX.Element {\r\n    const { config, enabled, list, nextConfig, onChange, onClear, onClick, selected, selecting } = props;\r\n\r\n    return config ? <Selected nextConfig={nextConfig} onClear={onClear} selected={selected} selecting={selecting} /> :\r\n                    <Selector enabled={enabled} list={list} onChange={onChange} onClick={onClick} selected={selected} />;\r\n}\r\n","import * as React from 'react';\r\n\r\nimport { Button, Checkbox, DropdownSelect, Radio, Tabs, TextField } from '@tableau/tableau-ui';\r\nimport { Setting } from './Setting';\r\n\r\n/* tslint:disable:no-console */\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\ninterface State {\r\n    applyButton: boolean,\r\n    autoUpdate: boolean,\r\n    bg: string,\r\n    configured: boolean,\r\n    dataType: string,\r\n    delimiter: string,\r\n    displayField: string,\r\n    field: string,\r\n    field_config: boolean,\r\n    field_enabled: boolean,\r\n    field_list: string[],\r\n    ignoreSelection: boolean,\r\n    includeAllValue: boolean,\r\n    multiselect: boolean,\r\n    param_config: boolean,\r\n    param_enabled: boolean,\r\n    param_list: string[],\r\n    parameter: string,\r\n    selectedTabIndex: number;\r\n    showDisplayValues: boolean,\r\n    sort: string,\r\n    txt: string,\r\n    updateOnChange: boolean,\r\n    useFormattedValues: boolean,\r\n    worksheet: string,\r\n    ws_config: boolean,\r\n    ws_enabled: boolean,\r\n    ws_list: string[],\r\n}\r\n\r\nconst Loading: string = 'Loading...';\r\nconst NoFieldsFound: string = 'No fields found that match parameter!';\r\nconst NoWorksheetsFound: string = 'No worksheets found!';\r\nconst NoParametersFound: string = 'No open input parameters found!';\r\n\r\nclass Configure extends React.Component<any, State> {\r\n    public readonly state: State = {\r\n        applyButton: false,\r\n        autoUpdate: false,\r\n        bg: '#ffffff',\r\n        configured: false,\r\n        dataType: 'string',\r\n        delimiter: '|',\r\n        displayField: '',\r\n        field: '',\r\n        field_config: false,\r\n        field_enabled: false,\r\n        field_list: [],\r\n        ignoreSelection: true,\r\n        includeAllValue: false,\r\n        multiselect: false,\r\n        param_config: false,\r\n        param_enabled: false,\r\n        param_list: [],\r\n        parameter: '',\r\n        selectedTabIndex: 0,\r\n        showDisplayValues: false,\r\n        sort: 'asc',\r\n        txt: '#333333',\r\n        updateOnChange: false,\r\n        useFormattedValues: false,\r\n        worksheet: '',\r\n        ws_config: false,\r\n        ws_enabled: false,\r\n        ws_list: [],\r\n    };\r\n\r\n    // Handles change in background color input\r\n    public bgChange = (color: any): void => {\r\n        this.setState({ bg: color.target.value });\r\n    };\r\n\r\n    // Handles change in text color input\r\n    public txtChange = (color: any): void => {\r\n        this.setState({ txt: color.target.value });\r\n    };\r\n\r\n    // Handles selection in parameter dropdown\r\n    public paramChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        this.setState({ parameter: e.target.value });\r\n    };\r\n\r\n    // Handles selection in field dropdown\r\n    public fieldChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        this.setState({ field: e.target.value });\r\n    };\r\n    \r\n    // Handles selection in worksheet dropdown\r\n    public wsChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        this.setState({ worksheet: e.target.value });\r\n    };\r\n    \r\n    // Handles change in ignoreSelection checkbox\r\n    public ignoreSelectionChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ ignoreSelection: !e.target.checked });\r\n    };\r\n    \r\n    // Handles change in useFormattedValues checkbox\r\n    public aliasChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ useFormattedValues: e.target.checked });\r\n    };\r\n    \r\n    // Handles change in \"(All)\" checkbox\r\n    public allChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ includeAllValue: e.target.checked });\r\n    };\r\n    \r\n    // Handles change in sort checkbox\r\n    public sortChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ sort: e.target.value });\r\n    };\r\n    \r\n    // Handles change in delimiter textbox\r\n    public delimiterChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ delimiter: e.target.value });\r\n    };\r\n    \r\n    // Handles change in multiselect checkbox\r\n    public multiselectChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ multiselect: e.target.checked });\r\n    };\r\n    \r\n    // Handles change in apply button checkbox\r\n    public applyChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ applyButton: e.target.checked });\r\n    };\r\n    \r\n    // Handles change in auto update checkbox\r\n    public autoUpdateChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ autoUpdate: e.target.checked });\r\n    };\r\n    \r\n    // Handles change in showDisplayValues checkbox\r\n    public displayChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ showDisplayValues: e.target.checked });\r\n    };\r\n    \r\n    // Handles selection in display values dropdown\r\n    public displayFieldChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        this.setState({ displayField: e.target.value });\r\n    };\r\n    \r\n    // Handles change in updateOnChange checkbox\r\n    public updateOnChangeChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ updateOnChange: e.target.checked });\r\n    };\r\n\r\n    // Handles change in options tabs   \r\n    public tabChange = (index: any): void => {\r\n        this.setState({ selectedTabIndex: index });\r\n    };\r\n\r\n    // Tests if extension is configured and if so, if the parameter in settings exists and accepts all values\r\n    public testParamSettings() {\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        if (this.state.configured) {\r\n            dashboard.findParameterAsync(settings.selParam).then((param: any) => {\r\n                if (param && param.allowableValues.type === 'all') {\r\n                    this.setState({\r\n                        dataType: param.dataType,\r\n                        param_config: true,\r\n                        parameter: param.name,\r\n                    });\r\n                    this.testWSSettings();\r\n                } else {\r\n                    this.populateParamList();\r\n                    this.setState({ configured: false });\r\n                }\r\n            })\r\n        } else {\r\n            this.populateParamList();\r\n        }\r\n    }\r\n\r\n    // Gets list of parameters in workbook and populates dropdown\r\n    public populateParamList() {\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        this.setState({\r\n            param_list: [Loading],\r\n            parameter: Loading,\r\n        });\r\n        dashboard.getParametersAsync().then((params: any) => {\r\n            const dropdownList: string[] = [];\r\n            for (const p of params) {\r\n                if (p.allowableValues.type === 'all') {\r\n                    dropdownList.push(p.name);\r\n                }\r\n            }\r\n            dropdownList.sort();\r\n            if (dropdownList.length > 0) {\r\n                this.setState({\r\n                    param_enabled: true,\r\n                    param_list: dropdownList,\r\n                    parameter: dropdownList[0],\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    param_enabled: false,\r\n                    param_list: [NoParametersFound],\r\n                    parameter: NoParametersFound,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // Sets which tableau parameter to update\r\n    public setParam = (): void => {\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        if (this.state.parameter !== '') {\r\n            dashboard.findParameterAsync(this.state.parameter).then((param: any) => {\r\n                this.setState({ \r\n                    dataType: param.dataType,\r\n                    includeAllValue: (param.dataType === 'string' ? this.state.includeAllValue : false),\r\n                    multiselect: (param.dataType === 'string' ? this.state.multiselect : false),\r\n                    param_config: true,\r\n                });\r\n                this.populateWS();\r\n            });\r\n        }\r\n    }\r\n\r\n    // Clears setting for which tableau parameter to update\r\n    public clearParam = (): void => {\r\n        this.setState({\r\n            param_config: false,\r\n            param_enabled: true,\r\n            ws_enabled: false,\r\n        });\r\n        this.populateParamList();\r\n    }\r\n\r\n    // Tests if extension is configured and if so, if the worksheet in settings exists\r\n    public testWSSettings() {\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        if (this.state.configured) {\r\n            if (dashboard.worksheets.find((ws: any) => ws.name === settings.selWorksheet)) {\r\n                this.setState({\r\n                    worksheet: settings.selWorksheet,\r\n                    ws_config: true,\r\n                    ws_enabled: false,\r\n                });\r\n                this.testFieldSettings();\r\n            } else {\r\n                this.populateWS();\r\n                this.setState({ configured: false });\r\n            }\r\n        } else {\r\n            this.populateWS();\r\n        }\r\n    }\r\n\r\n    // Gets list of worksheets in dashboard and populates dropdown\r\n    public populateWS() {\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        this.setState({\r\n            worksheet: Loading,\r\n            ws_list: [Loading],\r\n        });\r\n        const dropdownList: string[] = [];\r\n        for (const ws of dashboard.worksheets) {\r\n            dropdownList.push(ws.name);\r\n        }\r\n        dropdownList.sort();\r\n        if (dropdownList.length > 0) {\r\n            this.setState({\r\n                worksheet: dropdownList[0],\r\n                ws_enabled: true,\r\n                ws_list: dropdownList,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                worksheet: NoWorksheetsFound,\r\n                ws_enabled: false,\r\n                ws_list: [NoWorksheetsFound],\r\n            });\r\n        }\r\n    }\r\n\r\n    // Sets which worksheet to use for filters\r\n    public setWS = (): void => {\r\n        if (this.state.worksheet !== '') {\r\n            this.setState({ ws_config: true });\r\n            this.populateFieldList();\r\n        }\r\n    }\r\n\r\n    // Clears setting for which worksheet to use for filters\r\n    public clearWS = (): void => {\r\n        this.setState({\r\n            field_enabled: false,\r\n            ws_config: false,\r\n            ws_enabled: true,\r\n        });\r\n        this.populateWS();\r\n    }\r\n\r\n    // Tests if extension is configued and if so, if the field in settings exists on the selected worksheet\r\n    public testFieldSettings() {\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        if (this.state.configured) {\r\n            dashboard.worksheets.find((w: any) => w.name === this.state.worksheet).getSummaryDataAsync().then((dataTable: any) => {\r\n                if (dataTable.columns.find((column: any) => column.fieldName === settings.selField)) {\r\n                    const dropdownList: string[] = [];\r\n                    for (const f of dataTable.columns) {\r\n                        dropdownList.push(f.fieldName);\r\n                    }\r\n                    dropdownList.sort();\r\n                    this.setState({\r\n                        configured: true,\r\n                        field: settings.selField,\r\n                        field_config: true,\r\n                        field_enabled: false,\r\n                        field_list: dropdownList,\r\n                    });\r\n                } else {\r\n                    this.populateFieldList();\r\n                    this.setState({ configured: false });\r\n                }\r\n            });\r\n        } else {\r\n            this.populateFieldList();\r\n        }\r\n    }\r\n\r\n    // Gets list of fields in previously selected worksheet's data and populates dropdown\r\n    public populateFieldList() {\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        this.setState({\r\n            field: Loading,\r\n            field_list: [Loading],\r\n        });\r\n        let dataType: string;\r\n        dashboard.findParameterAsync(this.state.parameter).then((param: any) => {\r\n            dataType = param.dataType;\r\n            return dashboard.worksheets.find((w: any) => w.name === this.state.worksheet).getSummaryDataAsync();\r\n        })\r\n            .then((dataTable: any) => {\r\n                const dropdownList: string[] = [];\r\n                for (const f of dataTable.columns) {\r\n                    if (f.dataType === dataType) {\r\n                        dropdownList.push(f.fieldName);\r\n                    }\r\n                }\r\n                dropdownList.sort();\r\n                if (dropdownList.length > 0) {\r\n                    this.setState({\r\n                        field: dropdownList[0],\r\n                        field_enabled: true,\r\n                        field_list: dropdownList,\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        field: NoFieldsFound,\r\n                        field_enabled: false,\r\n                        field_list: [NoFieldsFound],\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    // Sets the field to pull values from for Data-Driven Parameter\r\n    public setField = (): void => {\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        if (this.state.field !== '') {\r\n            this.setState({\r\n                configured: true,\r\n                field_config: true,\r\n            });\r\n        }\r\n\r\n        // For display values list\r\n        dashboard.worksheets.find((w: any) => w.name === this.state.worksheet).getSummaryDataAsync().then((dataTable: any) => {\r\n            const dropdownList: string[] = [];\r\n            for (const f of dataTable.columns) {\r\n                dropdownList.push(f.fieldName);\r\n            }\r\n            dropdownList.sort();\r\n            this.setState({\r\n                displayField: dropdownList[0],\r\n                field_list: dropdownList,\r\n            });\r\n        });\r\n    }\r\n\r\n    // Clears the field to pull values from for Data-Driven Parameter\r\n    public clearField = (): void => {\r\n        this.setState({\r\n            configured: false,\r\n            field_config: false,\r\n            field_enabled: true,\r\n        });\r\n        this.populateFieldList();\r\n    }\r\n\r\n    // Saves settings and closes configure dialog\r\n    public submit = (): void => {\r\n        window.tableau.extensions.settings.set('selParam', this.state.parameter);\r\n        window.tableau.extensions.settings.set('selWorksheet', this.state.worksheet);\r\n        window.tableau.extensions.settings.set('selField', this.state.field);\r\n        window.tableau.extensions.settings.set('bg', this.state.bg);\r\n        window.tableau.extensions.settings.set('txt', this.state.txt);\r\n        window.tableau.extensions.settings.set('sort', this.state.sort);\r\n        window.tableau.extensions.settings.set('ignoreSelection', this.state.ignoreSelection);\r\n        window.tableau.extensions.settings.set('useFormattedValues', this.state.useFormattedValues);\r\n        window.tableau.extensions.settings.set('includeAllValue', (this.state.dataType !== 'string' ? 'false' : this.state.includeAllValue));\r\n        window.tableau.extensions.settings.set('delimiter', this.state.delimiter);\r\n        window.tableau.extensions.settings.set('multiselect', (this.state.dataType !== 'string' ? 'false' : this.state.multiselect));\r\n        window.tableau.extensions.settings.set('autoUpdate', this.state.autoUpdate);\r\n        window.tableau.extensions.settings.set('dataType', this.state.dataType || 'string');\r\n        window.tableau.extensions.settings.set('showDisplayValues', this.state.showDisplayValues);\r\n        window.tableau.extensions.settings.set('displayField', this.state.displayField);\r\n        window.tableau.extensions.settings.set('updateOnChange', this.state.updateOnChange);\r\n        window.tableau.extensions.settings.set('applyButton', this.state.applyButton);\r\n        window.tableau.extensions.settings.set('configured', 'true');\r\n        window.tableau.extensions.settings.saveAsync().then(() => {\r\n            window.tableau.extensions.ui.closeDialog(this.state.worksheet);\r\n        });\r\n    }\r\n\r\n    // Clears settings and states\r\n    public clearSettings = (): void => {\r\n        this.setState({\r\n            configured: false,\r\n            displayField: '',\r\n            field: '',\r\n            field_config: false,\r\n            field_enabled: false,\r\n            field_list: [],\r\n            param_config: false,\r\n            param_list: [],\r\n            parameter: '',\r\n            showDisplayValues: false,\r\n            worksheet: '',\r\n            ws_config: false,\r\n            ws_enabled: false,\r\n            ws_list: [],\r\n        });\r\n        this.populateParamList();\r\n    }\r\n\r\n    // Once we have mounted, we call to initialize\r\n    public componentWillMount() {\r\n        window.tableau.extensions.initializeDialogAsync().then(() => {\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            if (settings.configured === 'true') {\r\n                this.setState({\r\n                    applyButton: settings.applyButton === 'true' || false,\r\n                    autoUpdate: settings.autoUpdate === 'true' || false,\r\n                    bg: settings.bg || '#ffffff',\r\n                    configured: true,\r\n                    dataType: settings.dataType,\r\n                    delimiter: settings.delimiter || '|',\r\n                    displayField: settings.displayField || '',\r\n                    ignoreSelection: (settings.ignoreSelection ? settings.ignoreSelection === 'true' : true),\r\n                    includeAllValue: settings.includeAllValue === 'true' || false,\r\n                    multiselect: settings.multiselect === 'true' || false,\r\n                    showDisplayValues: settings.showDisplayValues === 'true' || false,\r\n                    sort: settings.sort || 'asc',\r\n                    txt: settings.txt || '#333333',\r\n                    updateOnChange: settings.updateOnChange === 'true' || false,\r\n                    useFormattedValues: settings.useFormattedValues === 'true' || false,\r\n                });\r\n                this.testParamSettings();\r\n            } else {\r\n                this.populateParamList();\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const configuration = <div className='content'>                      \r\n            <Setting selecting='parameter' onClick={this.setParam} onClear={this.clearParam} config={this.state.param_config} nextConfig={this.state.ws_config} selected={this.state.parameter} enabled={this.state.param_enabled && !this.state.param_config} list={this.state.param_list} onChange={this.paramChange} />\r\n            <Setting selecting='worksheet' onClick={this.setWS} onClear={this.clearWS} config={this.state.ws_config} nextConfig={this.state.field_config} selected={this.state.worksheet} enabled={this.state.ws_enabled} list={this.state.ws_list} onChange={this.wsChange} />\r\n            <Setting selecting='field' onClick={this.setField} onClear={this.clearField} config={this.state.field_config} selected={this.state.field} enabled={this.state.field_enabled} list={this.state.field_list} onChange={this.fieldChange} />\r\n        </div>;\r\n\r\n        const options = <div className='content'>\r\n            <div className='option'>\r\n                <Checkbox checked={!this.state.ignoreSelection} onChange={this.ignoreSelectionChange} style={{ flexGrow: 1}}>Filter parameter list based on worksheet selections</Checkbox>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox checked={this.state.autoUpdate} onChange={this.autoUpdateChange} style={{ flexGrow: 1}}>Automatically reset values on dashboard load.</Checkbox>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox checked={this.state.updateOnChange} onChange={this.updateOnChangeChange} style={{ flexGrow: 1}}>Update list of values on parameter change.</Checkbox>\r\n            </div>\r\n            <div className='option'>\r\n                Sorting: \r\n                <Radio checked={this.state.sort === 'asc'} onChange={this.sortChange} name='sorting' value='asc' style={{ margin: '0px 12px'}}>Ascending (A-Z)</Radio>\r\n                <Radio checked={this.state.sort === 'desc'} onChange={this.sortChange} name='sorting' value='desc' style={{ margin: '0px 12px'}}>Descending (Z-A)</Radio>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox disabled={!this.state.field_config} checked={this.state.showDisplayValues} onChange={this.displayChange} style={{ marginRight: '10px' }}>Use different field for display values</Checkbox>\r\n                <div style={{display: 'flex', width: '150px'}}>\r\n                <DropdownSelect className='dropdown-select' disabled={!this.state.showDisplayValues || !this.state.field_config} kind='line' onChange={this.displayFieldChange} value={this.state.displayField} style={{ flexGrow: 1}}>\r\n                    {this.state.field_list.map(option => <option key={option}>{option}</option>)}\r\n                </DropdownSelect></div>\r\n            </div>\r\n            <div className='option'>\r\n                <p><i>For use with string parameters only:</i></p>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox disabled={this.state.dataType !== 'string'} checked={this.state.useFormattedValues && this.state.dataType === 'string'} onChange={this.aliasChange} style={{ flexGrow: 1}}>Use aliased values</Checkbox>\r\n            </div>                            \r\n            <div className='option'>\r\n                <Checkbox disabled={this.state.dataType !== 'string'} checked={this.state.includeAllValue  && this.state.dataType === 'string'} onChange={this.allChange} style={{ flexGrow: 1}}>Include \"(All)\" in parameter list <br/> <i>Note: This is only a placeholder for calculations.</i></Checkbox>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox disabled={this.state.dataType !== 'string'} checked={this.state.multiselect  && this.state.dataType === 'string'} onChange={this.multiselectChange} style={{ marginRight: '10px'}}>Allow for multiple selections.</Checkbox>\r\n                <span children='Delimiter:' style={{ marginRight: '5px' }} />\r\n                <TextField kind='line' onChange={this.delimiterChange} className='delimiter-text-field' value={this.state.delimiter} disabled={!this.state.multiselect || this.state.dataType !== 'string'} maxLength={1} style={{ width: 20 }} />\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox disabled={!this.state.multiselect} checked={this.state.applyButton && this.state.multiselect} onChange={this.applyChange} style={{ flexGrow: 1}}>Show apply button.</Checkbox>\r\n            </div>\r\n        </div>;\r\n\r\n        const formatting = <div className='content'>\r\n            <div className='format'>\r\n                <div className='formattext'>Background Color</div>\r\n                <div>\r\n                    <input type='color' value={this.state.bg} onChange={this.bgChange} style={{ backgroundColor: this.state.bg }} />\r\n                </div>\r\n            </div>\r\n            <div className='format'>\r\n                <div className='formattext'>Text Color</div>\r\n                <div>\r\n                    <input type='color' value={this.state.txt} onChange={this.txtChange} style={{ backgroundColor: this.state.txt }} />\r\n                </div>\r\n            </div>\r\n        </div>;\r\n\r\n        const panels = [configuration, options, formatting];\r\n        const tabs = [ { content: 'Configure' }, { content: 'Options' }, { content: 'Formatting' } ];\r\n        // const initialState = { selectedTabIndex: 0 };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className='container'>\r\n                    <div>\r\n                        <div className='header'>\r\n                            Data-Driven Parameter Configuration\r\n                            <div className='tooltip'>\r\n                                <svg xmlns='http://www.w3.org/2000/svg' id='Dialogs_x5F_Info' width='15' height='15' viewBox='0 0 15 15'>\r\n                                    <rect id='Line' x='7' y='6' width='1' height='5' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                    <rect id='Dot_2_' x='7' y='4' width='1' height='1' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                    <path id='Circle' d='M7.5,1C3.9,1,1,3.9,1,7.5S3.9,14,7.5,14 S14,11.1,14,7.5S11.1,1,7.5,1z M7.5,13C4.5,13,2,10.5,2,7.5C2,4.5,4.5,2,7.5,2S13,4.5,13,7.5C13,10.5,10.5,13,7.5,13z' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                </svg>\r\n                                <span className='tooltiptext'>\r\n                                    <b>How to Use</b>\r\n                                    <ol>\r\n                                        <li>Select a Tableau parameter to manipulate. This parameter must already exists and must allow \"all\" values.</li>\r\n                                        <li>Select a worksheet with the data you want to use in your parameter.</li>\r\n                                        <li>Select a field to use to populate the parameter. Field data type must match the data type of parameter.</li>\r\n                                    </ol>\r\n                                    <br/>\r\n                                    <p>Note: Mac Desktop 2018.3 and lower, please use arrow keys and 'Enter' to select options</p>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div className='tabs'>\r\n                            <Tabs activation='automatic' alignment='left' onTabChange={this.tabChange} selectedTabIndex={this.state.selectedTabIndex} tabs={tabs}>\r\n                                {panels[this.state.selectedTabIndex]}\r\n                            </Tabs>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='footer'>\r\n                        <div className='btncluster'>\r\n                            <Button onClick={this.clearSettings} style={{ marginRight: 'auto' }}>Clear Settings</Button>\r\n                            <Button kind='filledGreen' onClick={this.submit} disabled={!this.state.configured || !this.state.ws_config} style={{ marginLeft: '12px' }}>OK</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Configure;","import * as React from 'react';\r\nimport './style.css';\r\n\r\n/* tslint:disable:no-console */\r\nimport { Button, DropdownSelect } from '@tableau/tableau-ui';\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\nlet parameter: any;\r\n\r\ninterface State {\r\n    applyButton: boolean,\r\n    bg: string,\r\n    configured: boolean,\r\n    currentVal: any[],\r\n    disabled: boolean,\r\n    firstInit: boolean,\r\n    list: any[],\r\n    multiselect: boolean,\r\n}\r\n\r\nconst NeedsConfiguring: any = { value: 'Parameter needs configuration', displayValue: 'Parameter needs configuration' };\r\nconst Loading: any = { value: 'Loading...', displayValue: 'Loading...' };\r\n\r\nfunction fakeWhiteOverlay(hex: string) {\r\n    const rgb = hexToRgb(hex);\r\n    if (rgb) {\r\n        return `rgb(${Math.min(Math.floor(rgb.r / 2) + 127, 255)}, ${Math.min(Math.floor(rgb.g / 2) + 127, 255)}, ${Math.min(Math.floor(rgb.b / 2) + 127, 255)})`;\r\n    } else {\r\n        return '#ffffff';\r\n    }\r\n}\r\n\r\nfunction hexToRgb(hex: string) {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        b: parseInt(result[3], 16),\r\n        g: parseInt(result[2], 16),\r\n        r: parseInt(result[1], 16),\r\n    } : null;\r\n}\r\n\r\nclass DataDrivenParameter extends React.Component<any, State> {\r\n    public readonly state: State = {\r\n        applyButton: false,\r\n        bg: '#ffffff',\r\n        configured: false,\r\n        currentVal: [Loading],\r\n        disabled: true,\r\n        firstInit: true,\r\n        list: [Loading],\r\n        multiselect: false,\r\n    };\r\n\r\n    // Pops open the configure page\r\n    public configure = (): void => {\r\n        const popupUrl = `${window.location.origin}${process.env.PUBLIC_URL}/#/config`;\r\n        const payload = '';\r\n        window.tableau.extensions.ui.displayDialogAsync(popupUrl, payload, { height: 525, width: 450 }).then((closePayload: string) => {\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            if (closePayload !== '') {\r\n                document.body.style.backgroundColor = settings.bg;\r\n                document.body.style.color = settings.txt;\r\n                this.setState({\r\n                    applyButton: settings.applyButton === 'true' || false,\r\n                    bg: (settings.bg ? fakeWhiteOverlay(settings.bg) : '#ffffff'),\r\n                    multiselect: settings.multiselect === 'true' || false,\r\n                });\r\n                this.findParameter();\r\n            } else {\r\n                this.setState({\r\n                    currentVal: [NeedsConfiguring],\r\n                    disabled: true,\r\n                    list: [NeedsConfiguring],\r\n                });\r\n            }\r\n        }).catch((error: any) => {\r\n            if (window.tableau.extensions.settings.get('configured') !== 'true') {\r\n                this.setState({\r\n                    currentVal: [NeedsConfiguring],\r\n                    disabled: true,\r\n                    list: [NeedsConfiguring],\r\n                });\r\n            }\r\n            switch (error.errorCode) {\r\n                case window.tableau.ErrorCodes.DialogClosedByUser:\r\n                    console.log('Dialog was closed by user.');\r\n                    break;\r\n                default:\r\n                    console.error(error.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Locates the parameter to update\r\n    public findParameter() {\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        window.tableau.extensions.dashboardContent.dashboard.findParameterAsync(settings.selParam).then((param: any) => {\r\n            parameter = param;\r\n            if (!parameter || parameter.allowableValues.type !== 'all') {\r\n                this.setState({\r\n                    currentVal: [NeedsConfiguring],\r\n                    disabled: true,\r\n                    list: [NeedsConfiguring],\r\n                });\r\n            } else {\r\n                this.getParamData();\r\n                this.setupWsEvent();\r\n            }\r\n        });\r\n    }\r\n\r\n    // Gets the values from the selected field and populates the Data-Driven Parameter\r\n    public getParamData = (): void => {\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        const worksheet = dashboard.worksheets.find((ws: any) => ws.name === settings.selWorksheet);\r\n        if (!worksheet) {\r\n            this.setState({\r\n                currentVal: [NeedsConfiguring],\r\n                disabled: true,\r\n                list: [NeedsConfiguring],\r\n            });\r\n        } else {\r\n            worksheet.getSummaryDataAsync({ ignoreSelection: settings.ignoreSelection === 'true' }).then((dataTable: any) => {\r\n                this.populateParam(dataTable);\r\n            });\r\n        }\r\n    }\r\n\r\n    // Pulls domain of selected field\r\n    public populateParam(dataTable: any) {\r\n        this.setState({\r\n            currentVal: [Loading],\r\n            disabled: true,\r\n            list: [Loading],\r\n        });\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        const field = dataTable.columns.find((column: any) => column.fieldName === settings.selField);\r\n        const displayField = dataTable.columns.find((column: any) => column.fieldName === settings.displayField);\r\n        if (!field) {\r\n            this.setState({\r\n                currentVal: [NeedsConfiguring],\r\n                disabled: true,\r\n                list: [NeedsConfiguring],\r\n            });\r\n        } else {\r\n            let list: any[] = [];\r\n            // Populate list with values from data source\r\n            for (const row of dataTable.data) {\r\n                const value = settings.useFormattedValues === 'true' ? row[field.index].formattedValue : row[field.index].value;\r\n                let displayValue = value;\r\n                if (displayField && settings.showDisplayValues === 'true') {\r\n                    displayValue = row[displayField.index].formattedValue\r\n                }\r\n                list.push({\r\n                    displayValue,\r\n                    value,\r\n                });\r\n            }\r\n\r\n            // Remove duplicates\r\n            list = list.filter((item, index, array) => array.indexOf(array.find(i => i.value === item.value)) === index);\r\n\r\n            if (settings.dataType && (settings.dataType === 'int' || settings.dataType === 'float')) {\r\n                // Convert to numbers for correct sort\r\n                list = list.map((item) => ({ value: Number(item.value), displayValue: item.displayValue }))\r\n                // Sort according to settings (numerical)\r\n                if (settings.sort && settings.sort === 'desc') {\r\n                    list.sort((a, b) => b.value - a.value);\r\n                } else {\r\n                    list.sort((a, b) => a.value - b.value);\r\n                }\r\n                if (settings.dataType === 'float') {\r\n                    list = list.map((item) => ({ value: item.value.toLocaleString(window.tableau.extensions.environment.locale), displayValue: item.displayValue }));\r\n                }\r\n            } else {\r\n                // Sort according to settings\r\n                if (settings.sort && settings.sort === 'desc') {\r\n                    list.sort((a, b) => a.value < b.value ? 1 : -1);\r\n                } else {\r\n                    list.sort((a, b) => a.value > b.value ? 1 : -1);\r\n                }\r\n            }\r\n\r\n            // Add '(All)' according to settings\r\n            if (settings.includeAllValue === 'true') {\r\n                list.unshift({ value: '(All)', displayValue: '(All)' });\r\n            }\r\n\r\n            let currentVal: any;\r\n            // Determine wether to use current param value or first value of list based on settings\r\n            if ((settings.autoUpdate === 'false' || (settings.autoUpdate === 'true' && !this.state.firstInit))) {\r\n                if (settings.multiselect === 'true') {\r\n                    // Use current param values if found in list, otherwise pick first of list.\r\n                    const tablist = [];\r\n                    for (const value of parameter.currentValue.value.split(settings.delimiter)) {\r\n                        if (list.find(v => v.value.toString() === value || v.value === value)) {\r\n                            tablist.push(value)\r\n                        }\r\n                    }\r\n                    if (tablist.length > 0) {\r\n                        currentVal = tablist;\r\n                    } else {\r\n                        currentVal = [(settings.includeAllValue === 'true' ? list[1].value : list[0].value)]\r\n                    }\r\n                } else {\r\n                    // Use current param value if found in list, otherwise pick first of list.\r\n                    if (list.find(v => v.value.toString() === parameter.currentValue.value || v.value === parameter.currentValue.value)) {\r\n                        currentVal = [parameter.currentValue.value];\r\n                    } else {\r\n                        currentVal = [(settings.includeAllValue === 'true' ? list[1].value : list[0].value)]\r\n                    }\r\n                }\r\n            } else {\r\n                currentVal = [(settings.includeAllValue === 'true' ? list[1].value : list[0].value)];\r\n            }\r\n\r\n            parameter.changeValueAsync(settings.multiselect ? currentVal.join(settings.delimiter) : currentVal.toString());\r\n\r\n            this.setState({\r\n                currentVal,\r\n                disabled: false,\r\n                firstInit: false,\r\n                list,\r\n            });\r\n        }\r\n    }\r\n\r\n    // Adds event listener to worksheet\r\n    public setupWsEvent() {\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        const worksheet = dashboard.worksheets.find((ws: any) => ws.name === settings.selWorksheet);\r\n        if (!worksheet) {\r\n            this.setState({\r\n                currentVal: [NeedsConfiguring],\r\n                disabled: true,\r\n                list: [NeedsConfiguring],\r\n            });\r\n        } else {\r\n            worksheet.addEventListener(window.tableau.TableauEventType.FilterChanged, this.getParamData);\r\n            worksheet.addEventListener(window.tableau.TableauEventType.MarkSelectionChanged, this.getParamData);\r\n        }\r\n    }\r\n\r\n    // Updates the parameter based on selection in Data-Driven Parameter\r\n    public updateParam = (e: any) => {\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        const values: any = [];\r\n        let newValue;\r\n        for (const opt of e.target.options) {\r\n            if (opt.selected) {\r\n                values.push(opt.value);\r\n            }\r\n        }\r\n        newValue = values.join(settings.delimiter);\r\n\r\n        if (!parameter) {\r\n            this.setState({\r\n                currentVal: [NeedsConfiguring],\r\n                disabled: true,\r\n                list: [NeedsConfiguring],\r\n            });\r\n        } else {\r\n            this.setState({ currentVal: values }, () => { console.log(this.state.currentVal) });\r\n            if (!settings.applyButton || settings.applyButton === 'false') {\r\n                parameter.changeValueAsync(newValue);\r\n            }\r\n        }\r\n\r\n        // Refresh domain on every selection. Keeps original functionality for those with older settings.\r\n        if (!settings.updateOnChange || settings.updateOnChange === 'true') {\r\n            if (!this.state.multiselect) {\r\n                this.getParamData();\r\n            }\r\n        }\r\n    }\r\n\r\n    public apply = (): void => {\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        parameter.changeValueAsync(this.state.currentVal.join(settings.delimiter))\r\n    }\r\n\r\n    // Once we have mounted, we call to initialize\r\n    public componentWillMount() {\r\n        window.tableau.extensions.initializeAsync({ configure: this.configure }).then(() => {\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            if (settings.configured === 'true') {\r\n                document.body.style.backgroundColor = settings.bg;\r\n                document.body.style.color = settings.txt;\r\n                this.setState({\r\n                    applyButton: settings.applyButton === 'true' || false,\r\n                    bg: (settings.bg ? fakeWhiteOverlay(settings.bg) : '#ffffff'),\r\n                    configured: true,\r\n                    multiselect: settings.multiselect === 'true' || false,\r\n                });\r\n                this.findParameter();\r\n            } else {\r\n                this.setState({\r\n                    currentVal: [NeedsConfiguring],\r\n                    disabled: true,\r\n                    list: [NeedsConfiguring],\r\n                });\r\n                this.configure();\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const multi = <div style={{ flexDirection: 'column' }}>\r\n            <select multiple={true} id='multi-select-parameter' className='parameter' value={this.state.currentVal} onChange={this.updateParam} disabled={this.state.disabled} style={{ backgroundColor: this.state.bg, color: 'inherit' }}>\r\n                {this.state.list.map((option: any) => (<option key={option.value || option.value} value={option.value}>{option.displayValue}</option>))}\r\n            </select>\r\n            <Button kind='filled' onClick={this.apply} style={{ display: (this.state.applyButton ? 'block' : 'none'), marginTop: '6px', width: '60px', height: '20px', marginLeft: 'auto' }}>Apply</Button>\r\n        </div>\r\n\r\n        const single = <div>\r\n            <DropdownSelect id='single-select-parameter' className='singleParameter' disabled={this.state.disabled || this.state.multiselect} kind='outline' onChange={this.updateParam} value={this.state.currentVal[0]} style={{ backgroundColor: this.state.bg, color: 'inherit', fontSize: '11px'}}>\r\n                {this.state.list.map((option: any) => <option key={option.value} value={option.value}>{option.displayValue}</option>)}\r\n            </DropdownSelect>\r\n        </div>\r\n\r\n        return (\r\n            <>\r\n                {this.state.multiselect ? multi : single}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataDrivenParameter;","import * as React from 'react';\nimport './home.css';\n\nclass Home extends React.Component<any, any> {\n    public render() {\n        return (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className='icontainer'>\n\t\t\t\t\t<div className='box'>\n\t\t\t\t\t\t<div className='left'>\n\t\t\t\t\t\t\t<h1 className='iheader'>Data-Driven Parameters</h1>\n\t\t\t\t\t\t\t<span className='tagline'>Automatically update your parameters based on your data!</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='right'>\n\t\t\t\t\t\t\t<h4 className='big'>What is it?</h4>\n\t\t\t\t\t\t\t<p>This extension allows you to add a parameter to a Tableau dashboard whose domain is based on your data. Added a new product line? No longer do you need to manually edit the parameter to update it, with this extension your parameter values\n\t\t\t\t\t\t\tupdate automatically!</p>\n\t\t\t\t\t\t\t<h4 className='big'>Using the Extension</h4>\n\t\t\t\t\t\t\t<ol>\n\t\t\t\t\t\t\t\t<li>Create an open input (All) parameter with a data type matching the field you want to use to populate it.</li>\n\t\t\t\t\t\t\t\t<li>Drag in a new Extension object to your dashboard.</li>\n\t\t\t\t\t\t\t\t<li>Find the manifest (.trex) file you downloaded above.</li>\n\t\t\t\t\t\t\t\t<li>Select the parameter you created above for the extension to manipulate.</li>\n\t\t\t\t\t\t\t\t<li>Select the worksheet that holds the field you want to base your parameter on.</li>\n\t\t\t\t\t\t\t\t<li>Select the field you want to base your parameter on.</li>\n\t\t\t\t\t\t\t\t<li>Optional: Configure your text and background colors.</li>\n\t\t\t\t\t\t\t\t<li>Click 'OK'.</li>\n\t\t\t\t\t\t\t</ol>\n\t\t\t\t\t\t\t<p><b>Note:</b> You can add as many instances of this extension as you like!</p>\n\t\t\t\t\t\t\t<div className='gh'>\n\t\t\t\t\t\t\t\tGet this extension and more in the <a href='https://extensiongallery.tableau.com/'>Extension Gallery</a>.\n\t\t\t\t\t\t\t\t{/* <a href='https://github.com/tableau/extension-data-driven-parameters'>View on GitHub</a> */}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n        );\n    }\n}\n\nexport default Home;","import 'react-app-polyfill/ie11';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Configure from './Configure';\nimport DataDrivenParameter from './DataDrivenParameter';\nimport Home from './Home';\n\nconst PrimaryLayout = () => (\n  <React.Fragment>\n      <Route path='/' exact={true} component={Home} />\n      <Route path='/parameter' component={DataDrivenParameter} />\n      <Route path='/config' component={Configure} />\n  </React.Fragment>\n)\n\nclass App extends React.Component {\n  public render() {\n      return (\n          <HashRouter>\n              <PrimaryLayout />\n          </HashRouter>\n      )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n"],"sourceRoot":""}