{"version":3,"sources":["Selected.tsx","Selector.tsx","Setting.tsx","Configure.tsx","DataDrivenParameter.tsx","Home.tsx","index.tsx"],"names":["Selected","props","className","selecting","selected","onClick","onClear","style","visibility","nextConfig","marginLeft","displayName","Selector","dropdownSelectProps","disabled","enabled","kind","onChange","onSelect","value","buttonProps","list","map","option","key","Setting","config","renderSelectElement","tableau","window","Loading","Configure","state","allLabel","applyButton","applyButtonLabel","autoUpdate","bg","configured","dataType","delimiter","displayField","field","field_config","field_enabled","field_list","updateOnSelectionFix","includeAllValue","listenParam","listenParamName","listenParamList","matchParam","multiselect","param_config","param_enabled","param_list","parameter","selectedTabIndex","showDisplayValues","sort","txt","updateOnChange","useFormattedValues","worksheet","ws_config","ws_enabled","ws_list","bgChange","color","setState","target","txtChange","paramChange","e","listenParameter","fieldChange","wsChange","sortChange","textInputChange","name","checkboxChange","checked","listInputChange","tabChange","index","setParam","dashboard","extensions","dashboardContent","findParameterAsync","then","param","populateWS","clearParam","populateParamList","setWS","populateFieldList","clearWS","setField","worksheets","find","w","getSummaryDataAsync","dataTable","dropdownList","columns","f","push","fieldName","clearField","submit","settings","set","saveAsync","ui","closeDialog","clearSettings","getAll","this","selParam","allowableValues","type","testWSSettings","getParametersAsync","params","p","length","ws","selWorksheet","testFieldSettings","column","selField","includes","initializeDialogAsync","testParamSettings","panels","margin","flexGrow","marginRight","display","width","children","maxLength","backgroundColor","xmlns","id","height","viewBox","x","y","fillRule","clipRule","fill","d","activation","alignment","onTabChange","tabs","content","React","unregister","NeedsConfiguring","displayValue","fakeWhiteOverlay","hex","rgb","result","exec","b","parseInt","g","r","hexToRgb","Math","min","floor","DataDrivenParameter","currentVal","firstInit","configure","popupUrl","location","origin","process","displayDialogAsync","closePayload","setup","catch","error","get","errorCode","ErrorCodes","DialogClosedByUser","console","log","message","getParamData","ignoreSelection","populateParam","setCurrentValue","tablist","currentValue","split","v","toString","changeValueAsync","join","matchListener","updateParam","newValue","values","options","opt","apply","resetListeners","createList","data","row","formattedValue","filter","item","array","indexOf","i","a","Number","toLocaleString","environment","locale","unshift","addEventListener","TableauEventType","FilterChanged","MarkSelectionChanged","ParameterChanged","updateParameter","fn","registerListeners","document","body","findParameter","initializeAsync","multi","flexDirection","multiple","marginTop","single","fontSize","Home","href","PrimaryLayout","path","exact","component","App","ReactDOM","getElementById"],"mappings":"4RAWaA,EAAqC,SAACC,GAC/C,OACI,uBAAKC,UAAU,YACX,yBAAG,gCAAQD,EAAME,UAAd,IAAyB,yBAAIF,EAAMG,UAAnC,uBACH,gBAAC,SAAD,CAAQC,QAASJ,EAAMK,QAASC,MAAO,CAAEC,WAAYP,EAAMQ,WAAa,SAAW,UAAWC,WAAY,SAA1G,WAKZV,EAASW,YAAc,WCRhB,IAAMC,EAAqC,SAACX,GAC/C,IAAMY,EAA2C,CAC7CX,UAAW,kBACXY,UAAWb,EAAMc,QACjBC,KAAM,OACNC,SAAUhB,EAAMgB,SAChBC,SAAUjB,EAAMgB,SAChBE,MAAOlB,EAAMG,UAGXgB,EAA2B,CAC7BN,UAAWb,EAAMc,SAA8B,KAAnBd,EAAMG,SAClCY,KAAM,cACNX,QAASJ,EAAMI,QACfE,MAAO,CAAEG,WAAY,SAGzB,OACI,uBAAKR,UAAU,YACX,gBAAC,iBAAmBW,EACfZ,EAAMoB,KAAKC,KAAI,SAAAC,GAAM,OAAI,0BAAQC,IAAKD,GAASA,OAEpD,gBAAC,SAAWH,EAAZ,SAKZR,EAASD,YAAc,WCvBhB,IAAMc,EAAmC,SAACxB,GAC7C,OACI,gBAAC,WAAD,KACI,wCAAgBA,EAAME,WAQlC,SAA6BF,GACzB,IAAQyB,EAAuFzB,EAAvFyB,OAAQX,EAA+Ed,EAA/Ec,QAASM,EAAsEpB,EAAtEoB,KAAMZ,EAAgER,EAAhEQ,WAAYQ,EAAoDhB,EAApDgB,SAAUX,EAA0CL,EAA1CK,QAASD,EAAiCJ,EAAjCI,QAASD,EAAwBH,EAAxBG,SAAUD,EAAcF,EAAdE,UAEjF,OAAOuB,EAAS,gBAAC,EAAD,CAAUjB,WAAYA,EAAYH,QAASA,EAASF,SAAUA,EAAUD,UAAWA,IAC/F,gBAAC,EAAD,CAAUY,QAASA,EAASM,KAAMA,EAAMJ,SAAUA,EAAUZ,QAASA,EAASD,SAAUA,IAXnFuB,CAAoB1B,KAKjCwB,EAAQd,YAAc,UCtBtB,IAAMiB,EAAUC,OAAOD,QAuCjBE,EAAkB,aA0jBTC,E,4MApjBKC,MAAe,CAC3BC,SAAU,QACVC,aAAa,EACbC,iBAAkB,QAClBC,YAAY,EACZC,GAAI,UACJC,YAAY,EACZC,SAAU,SACVC,UAAW,IACXC,aAAc,GACdC,MAAO,GACPC,cAAc,EACdC,eAAe,EACfC,WAAY,GACZC,sBAAsB,EACtBC,iBAAiB,EACjBC,aAAa,EACbC,gBAAiB,GACjBC,gBAAiB,GACjBC,YAAY,EACZC,aAAa,EACbC,cAAc,EACdC,eAAe,EACfC,WAAY,GACZC,UAAW,GACXC,iBAAkB,EAClBC,mBAAmB,EACnBC,KAAM,MACNC,IAAK,UACLC,gBAAgB,EAChBC,oBAAoB,EACpBC,UAAW,GACXC,WAAW,EACXC,YAAY,EACZC,QAAS,I,EAINC,SAAW,SAACC,GACf,EAAKC,SAAS,CAAEhC,GAAI+B,EAAME,OAAOnD,S,EAI9BoD,UAAY,SAACH,GAChB,EAAKC,SAAS,CAAET,IAAKQ,EAAME,OAAOnD,S,EAI/BqD,YAAc,SAACC,GAClB,EAAKJ,SAAS,CAAEb,UAAWiB,EAAEH,OAAOnD,OAAS,EAAKuD,kB,EAI/CC,YAAc,SAACF,GAClB,EAAKJ,SAAS,CAAE3B,MAAO+B,EAAEH,OAAOnD,S,EAI7ByD,SAAW,SAACH,GACf,EAAKJ,SAAS,CAAEN,UAAWU,EAAEH,OAAOnD,S,EAIjC0D,WAAa,SAACJ,GACjB,EAAKJ,SAAS,CAAEV,KAAMc,EAAEH,OAAOnD,S,EAI5B2D,gBAAkB,SAACL,GACtB,EAAKJ,SAAL,eAAiBI,EAAEH,OAAOS,KAAON,EAAEH,OAAOnD,S,EAIvC6D,eAAiB,SAACP,GACrB,EAAKJ,SAAL,eAAiBI,EAAEH,OAAOS,KAAON,EAAEH,OAAOW,W,EAIvCC,gBAAkB,SAACT,GACtB,EAAKJ,SAAL,eAAiBI,EAAEH,OAAOS,KAAON,EAAEH,OAAOnD,S,EAIvCgE,UAAY,SAACC,GAChB,EAAKf,SAAS,CAAEZ,iBAAkB2B,K,EA0D/BC,SAAW,WACd,IAAMC,EAAY1D,EAAQ2D,WAAWC,iBAAiBF,UACzB,KAAzB,EAAKtD,MAAMwB,WACX8B,EAAUG,mBAAmB,EAAKzD,MAAMwB,WAAWkC,MAAK,SAACC,GACrD,EAAKtB,SAAS,CACV9B,SAAUoD,EAAMpD,SAChBQ,gBAAqC,WAAnB4C,EAAMpD,UAAwB,EAAKP,MAAMe,gBAC3DK,YAAiC,WAAnBuC,EAAMpD,UAAwB,EAAKP,MAAMoB,YACvDC,cAAc,IAElB,EAAKuC,iB,EAMVC,WAAa,WAChB,EAAKxB,SAAS,CACVhB,cAAc,EACdC,eAAe,EACfW,YAAY,IAEhB,EAAK6B,qB,EAoDFC,MAAQ,WACkB,KAAzB,EAAK/D,MAAM+B,YACX,EAAKM,SAAS,CAAEL,WAAW,IAC3B,EAAKgC,sB,EAKNC,QAAU,WACb,EAAK5B,SAAS,CACVzB,eAAe,EACfoB,WAAW,EACXC,YAAY,IAEhB,EAAK2B,c,EAqEFM,SAAW,WACd,IAAMZ,EAAY1D,EAAQ2D,WAAWC,iBAAiBF,UAC7B,KAArB,EAAKtD,MAAMU,OACX,EAAK2B,SAAS,CACV/B,YAAY,EACZK,cAAc,IAKtB2C,EAAUa,WAAWC,MAAK,SAACC,GAAD,OAAYA,EAAEtB,OAAS,EAAK/C,MAAM+B,aAAWuC,sBAAsBZ,MAAK,SAACa,GAC/F,IADkH,EAC5GC,EAAyB,GADmF,cAElGD,EAAUE,SAFwF,IAElH,2BAAmC,CAAC,IAAzBC,EAAwB,QAC/BF,EAAaG,KAAKD,EAAEE,YAH0F,8BAKlHJ,EAAa7C,OACb,EAAKU,SAAS,CACV5B,aAAc+D,EAAa,GAC3B3D,WAAY2D,Q,EAMjBK,WAAa,WAChB,EAAKxC,SAAS,CACV/B,YAAY,EACZK,cAAc,EACdC,eAAe,IAEnB,EAAKoD,qB,EAIFc,OAAS,WACZlF,EAAQ2D,WAAWwB,SAASC,IAAI,WAAY,EAAKhF,MAAMC,UACvDL,EAAQ2D,WAAWwB,SAASC,IAAI,cAAe,EAAKhF,MAAME,aAAe,EAAKF,MAAMoB,aACpFxB,EAAQ2D,WAAWwB,SAASC,IAAI,mBAAoB,EAAKhF,MAAMG,kBAC/DP,EAAQ2D,WAAWwB,SAASC,IAAI,aAAc,EAAKhF,MAAMI,YACzDR,EAAQ2D,WAAWwB,SAASC,IAAI,KAAM,EAAKhF,MAAMK,IACjDT,EAAQ2D,WAAWwB,SAASC,IAAI,aAAc,QAC9CpF,EAAQ2D,WAAWwB,SAASC,IAAI,WAAY,EAAKhF,MAAMO,UAAY,UACnEX,EAAQ2D,WAAWwB,SAASC,IAAI,YAAa,EAAKhF,MAAMQ,WACxDZ,EAAQ2D,WAAWwB,SAASC,IAAI,eAAgB,EAAKhF,MAAMS,cAC3Db,EAAQ2D,WAAWwB,SAASC,IAAI,kBAAmB,EAAKhF,MAAMe,iBAA2C,WAAxB,EAAKf,MAAMO,UAC5FX,EAAQ2D,WAAWwB,SAASC,IAAI,cAAe,EAAKhF,MAAMgB,aAC1DpB,EAAQ2D,WAAWwB,SAASC,IAAI,kBAAmB,EAAKhF,MAAMiB,iBAAmB,IACjFrB,EAAQ2D,WAAWwB,SAASC,IAAI,aAAc,EAAKhF,MAAMmB,YACzDvB,EAAQ2D,WAAWwB,SAASC,IAAI,cAAe,EAAKhF,MAAMoB,aAAuC,WAAxB,EAAKpB,MAAMO,UACpFX,EAAQ2D,WAAWwB,SAASC,IAAI,WAAY,EAAKhF,MAAMU,OACvDd,EAAQ2D,WAAWwB,SAASC,IAAI,WAAY,EAAKhF,MAAMwB,WACvD5B,EAAQ2D,WAAWwB,SAASC,IAAI,eAAgB,EAAKhF,MAAM+B,WAC3DnC,EAAQ2D,WAAWwB,SAASC,IAAI,oBAAqB,EAAKhF,MAAM0B,mBAChE9B,EAAQ2D,WAAWwB,SAASC,IAAI,OAAQ,EAAKhF,MAAM2B,MACnD/B,EAAQ2D,WAAWwB,SAASC,IAAI,MAAO,EAAKhF,MAAM4B,KAClDhC,EAAQ2D,WAAWwB,SAASC,IAAI,iBAAkB,EAAKhF,MAAM6B,gBAC7DjC,EAAQ2D,WAAWwB,SAASC,IAAI,uBAAwB,EAAKhF,MAAMc,sBACnElB,EAAQ2D,WAAWwB,SAASC,IAAI,qBAAsB,EAAKhF,MAAM8B,oBAA8C,WAAxB,EAAK9B,MAAMO,UAClGX,EAAQ2D,WAAWwB,SAASE,YAAYvB,MAAK,WACzC9D,EAAQ2D,WAAW2B,GAAGC,YAAY,EAAKnF,MAAM+B,e,EAK9CqD,cAAgB,WACnB,EAAK/C,SAAS,CACV/B,YAAY,EACZG,aAAc,GACdC,MAAO,GACPC,cAAc,EACdC,eAAe,EACfC,WAAY,GACZQ,cAAc,EACdE,WAAY,GACZC,UAAW,GACXE,mBAAmB,EACnBK,UAAW,GACXC,WAAW,EACXC,YAAY,EACZC,QAAS,KAEb,EAAK4B,qB,uDApST,WAA4B,IAAD,OACjBR,EAAY1D,EAAQ2D,WAAWC,iBAAiBF,UAChDyB,EAAWnF,EAAQ2D,WAAWwB,SAASM,SACzCC,KAAKtF,MAAMM,WACXgD,EAAUG,mBAAmBsB,EAASQ,UAAU7B,MAAK,SAACC,GAC9CA,GAAwC,QAA/BA,EAAM6B,gBAAgBC,MAC/B,EAAKpD,SAAS,CACV9B,SAAUoD,EAAMpD,SAChBc,cAAc,EACdG,UAAWmC,EAAMZ,MAClB,EAAKL,iBACR,EAAKgD,mBAEL,EAAK5B,oBACL,EAAKzB,SAAS,CAAE/B,YAAY,QAIpCgF,KAAKxB,sB,+BAKb,WAA4B,IAAD,OACjBR,EAAY1D,EAAQ2D,WAAWC,iBAAiBF,UACtDgC,KAAKjD,SAAS,CACVd,WAAY,CAACzB,GACb0B,UAAW1B,IAEfwD,EAAUqC,qBAAqBjC,MAAK,SAACkC,GACjC,IADiD,EAC3CpB,EAAyB,GADkB,cAEjCoB,GAFiC,IAEjD,2BAAwB,CAAC,IAAdC,EAAa,QACW,QAA3BA,EAAEL,gBAAgBC,MAClBjB,EAAaG,KAAKkB,EAAE9C,OAJqB,8BAOjDyB,EAAa7C,OACT6C,EAAasB,OAAS,EACtB,EAAKzD,SAAS,CACVf,eAAe,EACfC,WAAYiD,EACZhD,UAAWgD,EAAa,IACzB,EAAK9B,iBAER,EAAKL,SAAS,CACVf,eAAe,EACfC,WAAY,CAzIE,mCA0IdC,UA1Ic,yC,4BA2K9B,WACI,IAAM8B,EAAY1D,EAAQ2D,WAAWC,iBAAiBF,UAChDyB,EAAWnF,EAAQ2D,WAAWwB,SAASM,SACzCC,KAAKtF,MAAMM,WACPgD,EAAUa,WAAWC,MAAK,SAAC2B,GAAD,OAAaA,EAAGhD,OAASgC,EAASiB,iBAC5DV,KAAKjD,SAAS,CACVN,UAAWgD,EAASiB,aACpBhE,WAAW,EACXC,YAAY,IAEhBqD,KAAKW,sBAELX,KAAK1B,aACL0B,KAAKjD,SAAS,CAAE/B,YAAY,KAGhCgF,KAAK1B,e,wBAKb,WACI,IAAMN,EAAY1D,EAAQ2D,WAAWC,iBAAiBF,UACtDgC,KAAKjD,SAAS,CACVN,UAAWjC,EACXoC,QAAS,CAACpC,KAEd,IANgB,EAMV0E,EAAyB,GANf,cAOClB,EAAUa,YAPX,IAOhB,2BAAuC,CAAC,IAA7B4B,EAA4B,QACnCvB,EAAaG,KAAKoB,EAAGhD,OART,8BAUhByB,EAAa7C,OACT6C,EAAasB,OAAS,EACtBR,KAAKjD,SAAS,CACVN,UAAWyC,EAAa,GACxBvC,YAAY,EACZC,QAASsC,IAGbc,KAAKjD,SAAS,CACVN,UApNkB,uBAqNlBE,YAAY,EACZC,QAAS,CAtNS,4B,+BA8O9B,WAA4B,IAAD,OACjBoB,EAAY1D,EAAQ2D,WAAWC,iBAAiBF,UAChDyB,EAAWnF,EAAQ2D,WAAWwB,SAASM,SACzCC,KAAKtF,MAAMM,WACXgD,EAAUa,WAAWC,MAAK,SAACC,GAAD,OAAYA,EAAEtB,OAAS,EAAK/C,MAAM+B,aAAWuC,sBAAsBZ,MAAK,SAACa,GAC/F,GAAIA,EAAUE,QAAQL,MAAK,SAAC8B,GAAD,OAAiBA,EAAOtB,YAAcG,EAASoB,YAAW,CACjF,IADiF,EAC3E3B,EAAyB,GADkD,cAEjED,EAAUE,SAFuD,IAEjF,2BAAmC,CAAC,IAAzBC,EAAwB,QAC/BF,EAAaG,KAAKD,EAAEE,YAHyD,8BAKjFJ,EAAa7C,OACb,EAAKU,SAAS,CACV/B,YAAY,EACZI,MAAOqE,EAASoB,SAChBxF,cAAc,EACdC,eAAe,EACfC,WAAY2D,SAGhB,EAAKR,oBACL,EAAK3B,SAAS,CAAE/B,YAAY,OAIpCgF,KAAKtB,sB,+BAKb,WAA4B,IAMpBzD,EANmB,OACjB+C,EAAY1D,EAAQ2D,WAAWC,iBAAiBF,UACtDgC,KAAKjD,SAAS,CACV3B,MAAOZ,EACPe,WAAY,CAACf,KAGjBwD,EAAUG,mBAAmB6B,KAAKtF,MAAMwB,WAAWkC,MAAK,SAACC,GAErD,OADApD,EAAWoD,EAAMpD,SACV+C,EAAUa,WAAWC,MAAK,SAACC,GAAD,OAAYA,EAAEtB,OAAS,EAAK/C,MAAM+B,aAAWuC,yBAE7EZ,MAAK,SAACa,GACH,IADsB,EAChBC,EAAyB,GADT,cAEND,EAAUE,SAFJ,IAEtB,2BAAmC,CAAC,IAAzBC,EAAwB,QAC3BA,EAAEnE,WAAaA,GACfiE,EAAaG,KAAKD,EAAEE,YAJN,8BAOtBJ,EAAa7C,OACT6C,EAAasB,OAAS,EACtB,EAAKzD,SAAS,CACV3B,MAAO8D,EAAa,GACpB5D,eAAe,EACfC,WAAY2D,IAGhB,EAAKnC,SAAS,CACV3B,MAvSM,wCAwSNE,eAAe,EACfC,WAAY,CAzSN,gD,6BAqY1B,WAA0B,IAAD,OACHjB,EAAQ2D,WAAWC,iBAAiBF,UAC5CqC,qBAAqBjC,MAAK,SAACkC,GACjC,IADiD,EAC3CpB,EAAyB,GADkB,cAEjCoB,GAFiC,IAEjD,2BAAwB,CAAC,IAAdC,EAAa,QAChBA,EAAE9C,OAAS,EAAK/C,MAAMwB,WACtBgD,EAAaG,KAAKkB,EAAE9C,OAJqB,8BAOjDyB,EAAa7C,OAEb,EAAKU,SAAS,CACVnB,gBAAiBsD,EACjBvD,gBAAiBuD,EAAa4B,SAAS,EAAKpG,MAAMiB,iBAAmB,EAAKjB,MAAMiB,gBAAkBuD,EAAa,U,gCAM3H,WAA6B,IAAD,OACxB5E,EAAQ2D,WAAW8C,wBAAwB3C,MAAK,WAC5C,IAAMqB,EAAWnF,EAAQ2D,WAAWwB,SAASM,SACjB,SAAxBN,EAASzE,YACT,EAAK+B,SAAS,CACVpC,SAAU8E,EAAS9E,UAAY,QAC/BC,YAAsC,SAAzB6E,EAAS7E,cAA0B,EAChDC,iBAAkB4E,EAAS5E,kBAAoB,QAC/CC,WAAoC,SAAxB2E,EAAS3E,aAAyB,EAC9CC,GAAI0E,EAAS1E,IAAM,UACnBC,YAAY,EACZC,SAAUwE,EAASxE,SACnBC,UAAWuE,EAASvE,WAAa,IACjCC,aAAcsE,EAAStE,cAAgB,GACvCM,gBAA8C,SAA7BgE,EAAShE,kBAA8B,EACxDC,YAAsC,SAAzB+D,EAAS/D,cAA0B,EAChDC,gBAAiB8D,EAAS9D,iBAAmB,GAC7CE,WAAoC,SAAxB4D,EAAS5D,aAAyB,EAC9CC,YAAsC,SAAzB2D,EAAS3D,cAA0B,EAChDM,kBAAkD,SAA/BqD,EAASrD,oBAAgC,EAC5DC,KAAMoD,EAASpD,MAAQ,MACvBC,IAAKmD,EAASnD,KAAO,UACrBC,eAA4C,SAA5BkD,EAASlD,iBAA6B,EACtDf,sBAAsBiE,EAASjE,uBAAyD,SAAlCiE,EAASjE,uBAAmC,GAClGgB,mBAAoD,SAAhCiD,EAASjD,qBAAiC,IAElE,EAAKwE,qBAEL,EAAKxC,yB,oBAKjB,WACI,IAgFMyC,EAAS,CAhFO,uBAAKrI,UAAU,WACjC,gBAAC,EAAD,CAASC,UAAU,YAAYE,QAASiH,KAAKjC,SAAU/E,QAASgH,KAAKzB,WAAYnE,OAAQ4F,KAAKtF,MAAMqB,aAAc5C,WAAY6G,KAAKtF,MAAMgC,UAAW5D,SAAUkH,KAAKtF,MAAMwB,UAAWzC,QAASuG,KAAKtF,MAAMsB,gBAAkBgE,KAAKtF,MAAMqB,aAAchC,KAAMiG,KAAKtF,MAAMuB,WAAYtC,SAAUqG,KAAK9C,cAC/R,gBAAC,EAAD,CAASrE,UAAU,YAAYE,QAASiH,KAAKvB,MAAOzF,QAASgH,KAAKrB,QAASvE,OAAQ4F,KAAKtF,MAAMgC,UAAWvD,WAAY6G,KAAKtF,MAAMW,aAAcvC,SAAUkH,KAAKtF,MAAM+B,UAAWhD,QAASuG,KAAKtF,MAAMiC,WAAY5C,KAAMiG,KAAKtF,MAAMkC,QAASjD,SAAUqG,KAAK1C,WACvP,gBAAC,EAAD,CAASzE,UAAU,QAAQE,QAASiH,KAAKpB,SAAU5F,QAASgH,KAAKT,WAAYnF,OAAQ4F,KAAKtF,MAAMW,aAAcvC,SAAUkH,KAAKtF,MAAMU,MAAO3B,QAASuG,KAAKtF,MAAMY,cAAevB,KAAMiG,KAAKtF,MAAMa,WAAY5B,SAAUqG,KAAK3C,eAG7M,uBAAKzE,UAAU,WAC3B,uBAAKA,UAAU,UAAf,WAEI,gBAAC,QAAD,CAAO+E,QAA6B,QAApBqC,KAAKtF,MAAM2B,KAAgB1C,SAAUqG,KAAKzC,WAAYE,KAAK,UAAU5D,MAAM,MAAMZ,MAAO,CAAEiI,OAAQ,aAAlH,mBACA,gBAAC,QAAD,CAAOvD,QAA6B,SAApBqC,KAAKtF,MAAM2B,KAAiB1C,SAAUqG,KAAKzC,WAAYE,KAAK,UAAU5D,MAAM,OAAOZ,MAAO,CAAEiI,OAAQ,aAApH,qBAEJ,uBAAKtI,UAAU,UACX,gBAAC,WAAD,CAAU6E,KAAK,uBAAuBE,QAASqC,KAAKtF,MAAMc,qBAAsB7B,SAAUqG,KAAKtC,eAAgBzE,MAAO,CAAEkI,SAAU,IAAlI,8CAEJ,uBAAKvI,UAAU,UACX,gBAAC,WAAD,CAAU6E,KAAK,aAAaE,QAASqC,KAAKtF,MAAMI,WAAYnB,SAAUqG,KAAKtC,eAAgBzE,MAAO,CAAEkI,SAAU,IAA9G,kDAEJ,uBAAKvI,UAAU,UACX,gBAAC,WAAD,CAAU6E,KAAK,iBAAiBjE,SAAUwG,KAAKtF,MAAMoB,YAAa6B,QAASqC,KAAKtF,MAAM6B,eAAgB5C,SAAUqG,KAAKtC,eAAgBzE,MAAO,CAAEkI,SAAU,IAAxJ,mEAEJ,uBAAKvI,UAAU,UACX,gBAAC,WAAD,CAAU6E,KAAK,aAAaE,QAASqC,KAAKtF,MAAMmB,WAAYlC,SAAUqG,KAAKtC,eAAgBzE,MAAO,CAAEkI,SAAU,IAA9G,kDAEJ,uBAAKvI,UAAU,UACX,gBAAC,WAAD,CAAU6E,KAAK,cAAcjE,UAAWwG,KAAKtF,MAAMqB,aAAc4B,QAASqC,KAAKtF,MAAMgB,YAAa/B,SAAUqG,KAAKtC,eAAgBzE,MAAO,CAAEmI,YAAa,SAAvJ,yCACA,uBAAKnI,MAAO,CAAEoI,QAAS,OAAQC,MAAO,UAClC,gBAAC,iBAAD,CAAgB7D,KAAK,kBAAkB7E,UAAU,kBAAkBY,UAAWwG,KAAKtF,MAAMgB,cAAgBsE,KAAKtF,MAAMqB,aAAcrC,KAAK,OAAOC,SAAUqG,KAAKpC,gBAAiB/D,MAAOmG,KAAKtF,MAAMiB,gBAAiB1C,MAAO,CAAEkI,SAAU,IAC/NnB,KAAKtF,MAAMkB,gBAAgB5B,KAAI,SAAAC,GAAM,OAAI,0BAAQC,IAAKD,GAASA,SAI5E,uBAAKrB,UAAU,UACX,gBAAC,WAAD,CAAU6E,KAAK,oBAAoBjE,UAAWwG,KAAKtF,MAAMW,aAAcsC,QAASqC,KAAKtF,MAAM0B,kBAAmBzC,SAAUqG,KAAKtC,eAAgBzE,MAAO,CAAEmI,YAAa,SAAnK,0CACA,uBAAKnI,MAAO,CAAEoI,QAAS,OAAQC,MAAO,UAClC,gBAAC,iBAAD,CAAgB7D,KAAK,eAAe7E,UAAU,kBAAkBY,UAAWwG,KAAKtF,MAAM0B,oBAAsB4D,KAAKtF,MAAMW,aAAc3B,KAAK,OAAOC,SAAUqG,KAAKpC,gBAAiB/D,MAAOmG,KAAKtF,MAAMS,aAAclC,MAAO,CAAEkI,SAAU,IAC/NnB,KAAKtF,MAAMa,WAAWvB,KAAI,SAAAC,GAAM,OAAI,0BAAQC,IAAKD,GAASA,SAIvE,uBAAKrB,UAAU,UACX,yBAAG,mEAEP,uBAAKA,UAAU,UACX,gBAAC,WAAD,CAAU6E,KAAK,qBAAqBjE,SAAkC,WAAxBwG,KAAKtF,MAAMO,SAAuB0C,QAASqC,KAAKtF,MAAM8B,oBAA8C,WAAxBwD,KAAKtF,MAAMO,SAAuBtB,SAAUqG,KAAKtC,eAAgBzE,MAAO,CAAEkI,SAAU,IAA9M,uBAEJ,uBAAKvI,UAAU,UACX,gBAAC,WAAD,CAAU6E,KAAK,kBAAkBjE,SAAkC,WAAxBwG,KAAKtF,MAAMO,SAAuB0C,QAASqC,KAAKtF,MAAMe,iBAA2C,WAAxBuE,KAAKtF,MAAMO,SAAuBtB,SAAUqG,KAAKtC,eAAgBzE,MAAO,CAAEmI,YAAa,SAA3M,qCACA,wBAAMG,SAAS,SAAStI,MAAO,CAAEmI,YAAa,MAAOtE,MAA+B,WAAxBkD,KAAKtF,MAAMO,UAA0B+E,KAAKtF,MAAMe,gBAA0C,UAAxB,yBAC9H,gBAAC,YAAD,CAAWgC,KAAK,WAAW/D,KAAK,OAAOC,SAAUqG,KAAKxC,gBAAiB5E,UAAU,uBAAuBiB,MAAOmG,KAAKtF,MAAMC,SAAUnB,SAAkC,WAAxBwG,KAAKtF,MAAMO,WAA0B+E,KAAKtF,MAAMe,gBAAiB+F,UAAW,GAAIvI,MAAO,CAAEqI,MAAO,QAGlP,qBAAGrI,MAAO,CAAEG,WAAY,SAAU,gFAClC,uBAAKR,UAAU,UACX,gBAAC,WAAD,CAAU6E,KAAK,cAAcjE,SAAkC,WAAxBwG,KAAKtF,MAAMO,SAAuB0C,QAASqC,KAAKtF,MAAMoB,aAAuC,WAAxBkE,KAAKtF,MAAMO,SAAuBtB,SAAUqG,KAAKtC,eAAgBzE,MAAO,CAAEmI,YAAa,SAAnM,kCACA,wBAAMG,SAAS,aAAatI,MAAO,CAAEmI,YAAa,MAAOtE,MAAQkD,KAAKtF,MAAMoB,YAAsC,UAAxB,yBAC1F,gBAAC,YAAD,CAAW2B,KAAK,YAAY/D,KAAK,OAAOC,SAAUqG,KAAKxC,gBAAiB5E,UAAU,uBAAuBiB,MAAOmG,KAAKtF,MAAMQ,UAAW1B,UAAWwG,KAAKtF,MAAMoB,aAAuC,WAAxBkE,KAAKtF,MAAMO,SAAuBuG,UAAW,EAAGvI,MAAO,CAAEqI,MAAO,OAE/O,uBAAK1I,UAAU,UACX,gBAAC,WAAD,CAAU6E,KAAK,cAAcjE,UAAWwG,KAAKtF,MAAMoB,YAAa6B,QAASqC,KAAKtF,MAAME,aAAeoF,KAAKtF,MAAMoB,YAAanC,SAAUqG,KAAKtC,eAAgBzE,MAAO,CAAEmI,YAAa,SAAhL,sBACA,wBAAMG,SAAS,SAAStI,MAAO,CAAEmI,YAAa,MAAOtE,MAAQkD,KAAKtF,MAAMoB,aAAgBkE,KAAKtF,MAAME,YAAsC,UAAxB,yBACjH,gBAAC,YAAD,CAAW6C,KAAK,mBAAmB/D,KAAK,OAAOC,SAAUqG,KAAKxC,gBAAiB5E,UAAU,uBAAuBiB,MAAOmG,KAAKtF,MAAMG,iBAAkBrB,UAAWwG,KAAKtF,MAAMoB,cAAgBkE,KAAKtF,MAAME,YAAa4G,UAAW,GAAIvI,MAAO,CAAEqI,MAAO,SAItO,uBAAK1I,UAAU,WAC9B,uBAAKA,UAAU,UACX,uBAAKA,UAAU,cAAf,oBACA,2BACI,yBAAOuH,KAAK,QAAQtG,MAAOmG,KAAKtF,MAAMK,GAAIpB,SAAUqG,KAAKnD,SAAU5D,MAAO,CAAEwI,gBAAiBzB,KAAKtF,MAAMK,QAGhH,uBAAKnC,UAAU,UACX,uBAAKA,UAAU,cAAf,cACA,2BACI,yBAAOuH,KAAK,QAAQtG,MAAOmG,KAAKtF,MAAM4B,IAAK3C,SAAUqG,KAAK/C,UAAWhE,MAAO,CAAEwI,gBAAiBzB,KAAKtF,MAAM4B,WAStH,OACI,gBAAC,WAAD,KACI,uBAAK1D,UAAU,aACX,2BACI,uBAAKA,UAAU,UAAf,sCAEI,uBAAKA,UAAU,WACX,uBAAK8I,MAAM,6BAA6BC,GAAG,mBAAmBL,MAAM,KAAKM,OAAO,KAAKC,QAAQ,aACzF,wBAAMF,GAAG,OAAOG,EAAE,IAAIC,EAAE,IAAIT,MAAM,IAAIM,OAAO,IAAII,SAAS,UAAUC,SAAS,UAAUC,KAAK,YAC5F,wBAAMP,GAAG,SAASG,EAAE,IAAIC,EAAE,IAAIT,MAAM,IAAIM,OAAO,IAAII,SAAS,UAAUC,SAAS,UAAUC,KAAK,YAC9F,wBAAMP,GAAG,SAASQ,EAAE,2JAA2JH,SAAS,UAAUC,SAAS,UAAUC,KAAK,aAE9N,wBAAMtJ,UAAU,eACZ,uCACA,0BACI,uIACA,iGACA,sIAEJ,2BACA,uHAIZ,uBAAKA,UAAU,QACX,gBAAC,OAAD,CAAMwJ,WAAW,YAAYC,UAAU,OAAOC,YAAatC,KAAKnC,UAAW1B,iBAAkB6D,KAAKtF,MAAMyB,iBAAkBoG,KA5BjI,CAAC,CAAEC,QAAS,aAAe,CAAEA,QAAS,WAAa,CAAEA,QAAS,gBA6BlDvB,EAAOjB,KAAKtF,MAAMyB,qBAK/B,uBAAKvD,UAAU,UACX,uBAAKA,UAAU,cACX,gBAAC,SAAD,CAAQG,QAASiH,KAAKF,cAAe7G,MAAO,CAAEmI,YAAa,SAA3D,kBACA,gBAAC,SAAD,CAAQ1H,KAAK,cAAcX,QAASiH,KAAKR,OAAQhG,UAAWwG,KAAKtF,MAAMM,aAAegF,KAAKtF,MAAMgC,UAAWzD,MAAO,CAAEG,WAAY,SAAjI,c,GA5iBJqJ,a,yBC5ClBnI,G,OAAUC,OAAOD,SAEnBoI,EAAa,CAAC,aAAW,aAAW,aAAW,cAe7CC,EAAwB,CAAE9I,MAAO,gCAAiC+I,aAAc,iCAChFpI,EAAe,CAAEX,MAAO,aAAc+I,aAAc,cAE1D,SAASC,EAAiBC,GACtB,IAAMC,EAQV,SAAkBD,GACd,IAAME,EAAS,4CAA4CC,KAAKH,GAChE,OAAOE,EAAS,CACZE,EAAGC,SAASH,EAAO,GAAI,IACvBI,EAAGD,SAASH,EAAO,GAAI,IACvBK,EAAGF,SAASH,EAAO,GAAI,KACvB,KAdQM,CAASR,GACrB,OAAIC,EACM,OAAN,OAAcQ,KAAKC,IAAID,KAAKE,MAAMV,EAAIM,EAAI,GAAK,IAAK,KAApD,aAA6DE,KAAKC,IAAID,KAAKE,MAAMV,EAAIK,EAAI,GAAK,IAAK,KAAnG,aAA4GG,KAAKC,IAAID,KAAKE,MAAMV,EAAIG,EAAI,GAAK,IAAK,KAAlJ,KAEO,U,IA0VAQ,E,4MA5UKhJ,MAAe,CAC3BC,SAAU,QACVC,aAAa,EACbC,iBAAkB,QAClBE,GAAI,UACJC,YAAY,EACZ2I,WAAY,CAACnJ,GACbhB,UAAU,EACVoK,WAAW,EACX7J,KAAM,CAACS,GACPsB,aAAa,G,EAIV+H,UAAY,WACf,IAAMC,EAAQ,UAAMvJ,OAAOwJ,SAASC,QAAtB,OAA+BC,GAA/B,aAEd3J,EAAQ2D,WAAW2B,GAAGsE,mBAAmBJ,EADzB,GAC4C,CAAElC,OAAQ,IAAKN,MAAO,MAAOlD,MAAK,SAAC+F,GAC3F,EAAKC,WACNC,OAAM,SAACC,GAQN,OAPsD,SAAlDhK,EAAQ2D,WAAWwB,SAAS8E,IAAI,eAChC,EAAKxH,SAAS,CACV4G,WAAY,CAAChB,GACbnJ,UAAU,EACVO,KAAM,CAAC4I,KAGP2B,EAAME,WACV,KAAKlK,EAAQmK,WAAWC,mBACpBC,QAAQC,IAAI,8BACZ,MACJ,QACID,QAAQL,MAAMA,EAAMO,c,EAwB7BC,aAAe,WAClB,IAAMrF,EAAWnF,EAAQ2D,WAAWwB,SAASM,SAEvCtD,EADYnC,EAAQ2D,WAAWC,iBAAiBF,UAC1Ba,WAAWC,MAAK,SAAC2B,GAAD,OAAaA,EAAGhD,OAASgC,EAASiB,gBACzEjE,EAODA,EAAUuC,oBAAoB,CAAE+F,gBAA8C,SAA7BtF,EAASsF,kBAA8B3G,MAAK,SAACa,GAC1F,EAAK+F,cAAc/F,MAPvB,EAAKlC,SAAS,CACV4G,WAAY,CAAChB,GACbnJ,UAAU,EACVO,KAAM,CAAC4I,M,EAoFZsC,gBAAkB,WACrB,IAAMxF,EAAWnF,EAAQ2D,WAAWwB,SAASM,SACvC/B,EAAY1D,EAAQ2D,WAAWC,iBAAiBF,UAChDjE,EAAO,EAAKW,MAAMX,KACpB4J,EAAoB,GACxB3F,EAAUG,mBAAmBsB,EAASQ,UAAU7B,MAAK,SAAClC,GAClD,GAAK,EAAKxB,MAAMkJ,WAAqC,SAAxBnE,EAAS3E,WAElC6I,EAAa,CAA+B,SAA7BlE,EAAShE,gBAA6B1B,EAAK,GAAGF,MAAQE,EAAK,GAAGF,WAC1E,CAEH,GAA6B,SAAzB4F,EAAS3D,YAAwB,CACjC,IADiC,EAC3BoJ,EAAU,GADiB,cAEbhJ,EAAUiJ,aAAatL,MAAMuL,MAAM3F,EAASvE,YAF/B,yBAEtBrB,EAFsB,QAGzBE,EAAK+E,MAAK,SAACuG,GAAD,OAAYA,EAAExL,MAAMyL,aAAezL,GAASwL,EAAExL,QAAUA,MAClEqL,EAAQ7F,KAAKxF,IAFrB,2BAA6E,IAF5C,8BAOjC8J,EAAauB,OAETnL,EAAK+E,MAAK,SAACuG,GAAD,OAAYA,EAAExL,MAAMyL,aAAepJ,EAAUiJ,aAAatL,OAASwL,EAAExL,QAAUqC,EAAUiJ,aAAatL,WAChH8J,EAAa,CAACzH,EAAUiJ,aAAatL,QAGnB,IAAtB8J,EAAWnD,SAEXmD,EAAa,CAA+B,SAA7BlE,EAAShE,gBAA6B1B,EAAK,GAAGF,MAAQE,EAAK,GAAGF,QAIrFqC,EAAUqJ,iBAAiB9F,EAAS3D,YAAc6H,EAAW6B,KAAK/F,EAASvE,WAAayI,EAAW2B,YAAYlH,KAAKuG,QAAQC,KAE5H,EAAK7H,SAAS,CACVvD,UAAU,EACVoK,WAAW,EACXD,mB,EAkCL8B,cAAgB,WACnB,IAAMhG,EAAWnF,EAAQ2D,WAAWwB,SAASM,SAC3BzF,EAAQ2D,WAAWC,iBAAiBF,UAC5CG,mBAAmBsB,EAASQ,UAAU7B,MAAK,SAAClC,GAClD,IAAMyH,EAAa,EAAKjJ,MAAMoB,YAAcI,EAAUiJ,aAAatL,MAAMuL,MAAM3F,EAASvE,WAAa,CAACgB,EAAUiJ,aAAatL,OAC7H,EAAKkD,SAAS,CACV4G,mB,EAaL+B,YAAc,SAACvI,GAClB,IAGIwI,EAJyB,EACvBlG,EAAWnF,EAAQ2D,WAAWwB,SAASM,SACvC/B,EAAY1D,EAAQ2D,WAAWC,iBAAiBF,UAChD4H,EAAc,GAHS,cAKXzI,EAAEH,OAAO6I,SALE,IAK7B,2BAAoC,CAAC,IAA1BC,EAAyB,QAC5BA,EAAIhN,UACJ8M,EAAOvG,KAAKyG,EAAIjM,QAPK,8BAU7B,EAAKkD,SAAS,CAAE4G,WAAYiC,IAC5BD,EAAWC,EAAOJ,KAAK/F,EAASvE,WAChC8C,EAAUG,mBAAmBsB,EAASQ,UAAU7B,MAAK,SAAClC,GAC7CA,EAO4B,UAAzBuD,EAAS7E,aACTsB,EAAUqJ,iBAAiBI,GAAUvH,KAAKuG,QAAQC,KAPtD,EAAK7H,SAAS,CACV4G,WAAY,CAAChB,GACbnJ,UAAU,EACVO,KAAM,CAAC4I,KAQiB,SAA5BlD,EAASlD,iBAEJ,EAAK7B,MAAMoB,aACZ,EAAKgJ,oB,EAMdiB,MAAQ,WACX,IAAMtG,EAAWnF,EAAQ2D,WAAWwB,SAASM,SAC3BzF,EAAQ2D,WAAWC,iBAAiBF,UAC5CG,mBAAmBsB,EAASQ,UAAU7B,MAAK,SAAClC,GAClDA,EAAUqJ,iBAAiB,EAAK7K,MAAMiJ,WAAW6B,KAAK/F,EAASvE,YAAYkD,KAAKuG,QAAQC,S,mDA5OhG,WAAwB,IAAD,OACbnF,EAAWnF,EAAQ2D,WAAWwB,SAASM,SAC3BzF,EAAQ2D,WAAWC,iBAAiBF,UAC5CG,mBAAmBsB,EAASQ,UAAU7B,MAAK,SAAClC,GAC7CA,GAAgD,QAAnCA,EAAUgE,gBAAgBC,MAOxC,EAAK2E,eACL,EAAKkB,kBAPL,EAAKjJ,SAAS,CACV4G,WAAY,CAAChB,GACbnJ,UAAU,EACVO,KAAM,CAAC4I,U,2BA4BvB,SAAqB1D,GACjB,IAAMQ,EAAWnF,EAAQ2D,WAAWwB,SAASM,SACvC3E,EAAQ6D,EAAUE,QAAQL,MAAK,SAAC8B,GAAD,OAAiBA,EAAOtB,YAAcG,EAASoB,YACpFb,KAAKjD,SAAS,CACV4G,WAAY,CAACnJ,GACbhB,UAAU,EACVO,KAAM,CAACS,KAGNY,EAOD4E,KAAKiG,WAAW7K,EAAO6D,GANvBe,KAAKjD,SAAS,CACV4G,WAAY,CAAChB,GACbnJ,UAAU,EACVO,KAAM,CAAC4I,O,wBAQnB,SAAkBvH,EAAY6D,GAC1B,IAD0C,EACpCQ,EAAWnF,EAAQ2D,WAAWwB,SAASM,SACvC5E,EAAe8D,EAAUE,QAAQL,MAAK,SAAC8B,GAAD,OAAiBA,EAAOtB,YAAcG,EAAStE,gBAEvFpB,EAAc,GAJwB,cAKxBkF,EAAUiH,MALc,IAK1C,2BAAkC,CAAC,IAAxBC,EAAuB,QACxBtM,EAAwC,SAAhC4F,EAASjD,mBAAgC2J,EAAI/K,EAAM0C,OAAOsI,eAAiBD,EAAI/K,EAAM0C,OAAOjE,MACtG+I,EAAe/I,EACfsB,GAA+C,SAA/BsE,EAASrD,oBACzBwG,EAAeuD,EAAIhL,EAAa2C,OAAOsI,gBAE3CrM,EAAKsF,KAAK,CACNuD,eACA/I,WAbkC,8BAkB1CE,EAAOA,EAAKsM,QAAO,SAACC,EAAMxI,EAAOyI,GAAd,OAAwBA,EAAMC,QAAQD,EAAMzH,MAAK,SAAA2H,GAAC,OAAIA,EAAE5M,QAAUyM,EAAKzM,YAAYiE,MAElG2B,EAASxE,UAAmC,QAAtBwE,EAASxE,UAA4C,UAAtBwE,EAASxE,SAc1DwE,EAASpD,MAA0B,SAAlBoD,EAASpD,KAC1BtC,EAAKsC,MAAK,SAACqK,EAAGxD,GAAJ,OAAUwD,EAAE7M,MAAQqJ,EAAErJ,MAAQ,GAAK,KAE7CE,EAAKsC,MAAK,SAACqK,EAAGxD,GAAJ,OAAUwD,EAAE7M,MAAQqJ,EAAErJ,MAAQ,GAAK,MAfjDE,EAAOA,EAAKC,KAAI,SAACsM,GAAD,MAAW,CAAEzM,MAAO8M,OAAOL,EAAKzM,OAAQ+I,aAAc0D,EAAK1D,iBAEvEnD,EAASpD,MAA0B,SAAlBoD,EAASpD,KAC1BtC,EAAKsC,MAAK,SAACqK,EAAGxD,GAAJ,OAAUA,EAAErJ,MAAQ6M,EAAE7M,SAEhCE,EAAKsC,MAAK,SAACqK,EAAGxD,GAAJ,OAAUwD,EAAE7M,MAAQqJ,EAAErJ,SAEV,UAAtB4F,EAASxE,WACTlB,EAAOA,EAAKC,KAAI,SAACsM,GAAD,MAAW,CAAEzM,MAAOyM,EAAKzM,MAAM+M,eAAetM,EAAQ2D,WAAW4I,YAAYC,QAASlE,aAAc0D,EAAK1D,mBAYhG,SAA7BnD,EAAShE,iBACT1B,EAAKgN,QAAQ,CAAElN,MAAOmG,KAAKtF,MAAMC,SAAUiI,aAAc5C,KAAKtF,MAAMC,WAGxEqF,KAAKjD,SAAS,CACVhD,QACDiG,KAAKiF,mB,sEA8CZ,+FACUxF,EAAWnF,EAAQ2D,WAAWwB,SAASM,SACvC/B,EAAY1D,EAAQ2D,WAAWC,iBAAiBF,UAChDvB,EAAYuB,EAAUa,WAAWC,MAAK,SAAC2B,GAAD,OAAaA,EAAGhD,OAASgC,EAASiB,gBAC9E1C,EAAUG,mBAAmBsB,EAASQ,UAAU7B,MAAK,SAAClC,GAC7CO,GAAcP,GAOVuD,EAASjE,sBAA0D,SAAlCiE,EAASjE,uBAC3CkH,EAAW,GAAKjG,EAAUuK,iBAAiB1M,EAAQ2M,iBAAiBC,cAAe,EAAKpC,cACxFpC,EAAW,GAAKjG,EAAUuK,iBAAiB1M,EAAQ2M,iBAAiBE,qBAAsB,EAAKrC,eAEvE,SAAxBrF,EAAS5D,aACT6G,EAAW,GAAKxG,EAAU8K,iBAAiB1M,EAAQ2M,iBAAiBG,iBAAkB,EAAK3B,gBAElE,SAAzBhG,EAAS/D,aACTsC,EAAUG,mBAAmBsB,EAAS9D,iBAAiByC,MAAK,SAACiJ,GACzD3E,EAAW,GAAK2E,EAAgBL,iBAAiB1M,EAAQ2M,iBAAiBG,iBAAkB,EAAKtC,kBAfzG,EAAK/H,SAAS,CACV4G,WAAY,CAAChB,GACbnJ,UAAU,EACVO,KAAM,CAAC4I,QATvB,2C,kFAuCA,WAAyB,IAAD,gBACLD,GADK,IACpB,2BAA2B,EACvB4E,EADuB,YADP,8BAIpBtH,KAAKuH,sB,mBA8CT,WACI,IAAM9H,EAAWnF,EAAQ2D,WAAWwB,SAASM,SAC7CyH,SAASC,KAAKxO,MAAMwI,gBAAkBhC,EAAS1E,GAC/CyM,SAASC,KAAKxO,MAAM6D,MAAQ2C,EAASnD,IACrC0D,KAAKjD,SAAS,CACVpC,SAAU8E,EAAS9E,UAAY,QAC/BC,YAAsC,SAAzB6E,EAAS7E,cAA0B,EAChDC,iBAAkB4E,EAAS5E,kBAAoB,QAC/CE,GAAK0E,EAAS1E,GAAK8H,EAAiBpD,EAAS1E,IAAM,UACnDC,YAAY,EACZc,YAAsC,SAAzB2D,EAAS3D,cAA0B,IAEpDkE,KAAK0H,kB,gCAIT,WAA6B,IAAD,OACxBpN,EAAQ2D,WAAW0J,gBAAgB,CAAE9D,UAAW7D,KAAK6D,YAAazF,MAAK,WAEvC,SADX9D,EAAQ2D,WAAWwB,SAASM,SAChC/E,WACT,EAAKoJ,SAEL,EAAKrH,SAAS,CACV4G,WAAY,CAAChB,GACbnJ,UAAU,EACVO,KAAM,CAAC4I,KAEX,EAAKkB,kB,oBAKjB,WACI,IAAM+D,EAAQ,uBAAK3O,MAAO,CAAE4O,cAAe,WACvC,0BAAQC,UAAU,EAAMnG,GAAG,yBAAyB/I,UAAU,YAAYiB,MAAOmG,KAAKtF,MAAMiJ,WAAYhK,SAAUqG,KAAK0F,YAAalM,SAAUwG,KAAKtF,MAAMlB,SAAUP,MAAO,CAAEwI,gBAAiBzB,KAAKtF,MAAMK,GAAI+B,MAAO,YAC9MkD,KAAKtF,MAAMX,KAAKC,KAAI,SAACC,GAAD,OAAkB,0BAAQC,IAAKD,EAAOJ,OAASI,EAAOJ,MAAOA,MAAOI,EAAOJ,OAAQI,EAAO2I,kBAEnH,gBAAC,SAAD,CAAQlJ,KAAK,SAASX,QAASiH,KAAK+F,MAAO9M,MAAO,CAAEoI,QAAUrB,KAAKtF,MAAME,YAAc,QAAU,OAASmN,UAAW,MAAOzG,MAAO,OAAQM,OAAQ,OAAQxI,WAAY,SAAW4G,KAAKtF,MAAMG,mBAG3LmN,EAAS,2BACX,gBAAC,iBAAD,CAAgBrG,GAAG,0BAA0B/I,UAAU,kBAAkBY,SAAUwG,KAAKtF,MAAMlB,UAAYwG,KAAKtF,MAAMoB,YAAapC,KAAK,UAAUC,SAAUqG,KAAK0F,YAAa7L,MAAOmG,KAAKtF,MAAMiJ,WAAW,GAAI1K,MAAO,CAAEwI,gBAAiBzB,KAAKtF,MAAMK,GAAI+B,MAAO,UAAWmL,SAAU,SAC9QjI,KAAKtF,MAAMX,KAAKC,KAAI,SAACC,GAAD,OAAiB,0BAAQC,IAAKD,EAAOJ,MAAOA,MAAOI,EAAOJ,OAAQI,EAAO2I,mBAItG,OACI,gCACK5C,KAAKtF,MAAMoB,YAAc8L,EAAQI,O,GAvUhBvF,aCAnByF,G,mKArCX,WACI,OACL,gBAAC,WAAD,KACC,uBAAKtP,UAAU,cACd,uBAAKA,UAAU,OACd,uBAAKA,UAAU,QACd,sBAAIA,UAAU,WAAd,0BACA,wBAAMA,UAAU,WAAhB,6DAED,uBAAKA,UAAU,SACd,sBAAIA,UAAU,OAAd,eACA,iSAEA,sBAAIA,UAAU,OAAd,uBACA,0BACC,sIACA,+EACA,kFACA,qGACA,2GACA,kFACA,kFACA,0CAED,yBAAG,kCAAH,iEACA,uBAAKA,UAAU,MAAf,sCACoC,qBAAGuP,KAAK,yCAAR,qBADpC,a,GA1BY1F,cCSb2F,EAAgB,kBACpB,gBAAC,WAAD,KACE,gBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWL,IACxC,gBAAC,IAAD,CAAOG,KAAK,aAAaE,UAAW7E,IACpC,gBAAC,IAAD,CAAO2E,KAAK,UAAUE,UAAW9N,MAI/B+N,E,4JACJ,WACE,OACE,gBAAC,IAAD,KACE,gBAAC,EAAD,W,GAJU/F,aAUlBgG,SAAgB,gBAAC,EAAD,MAASjB,SAASkB,eAAe,e","file":"static/js/main.3e39f2b4.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Button } from '@tableau/tableau-ui';\n\nexport interface SelectedProps {\n    nextConfig?: boolean;\n    onClear: () => void;\n    selected: string;\n    selecting: string;\n}\n\n// An individual setting that has been set\nexport const Selected: React.SFC<SelectedProps> = (props) => {\n    return (\n        <div className='selected'>\n            <p><i>The {props.selecting} <b>{props.selected}</b> has been selected</i></p>\n            <Button onClick={props.onClear} style={{ visibility: props.nextConfig ? 'hidden' : 'visible', marginLeft: '12px' }}>Clear</Button>\n        </div>\n    );\n};\n\nSelected.displayName = 'Selected';\n","import * as React from 'react';\nimport { Button, ButtonProps, DropdownSelect, DropdownSelectProps } from '@tableau/tableau-ui';\n\nexport interface SelectorProps {\n    enabled: boolean;\n    list: string[];\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n    onClick: () => void;\n    selected: string;\n}\n\n// Shows if setting has not yet been configured\nexport const Selector: React.SFC<SelectorProps> = (props) => {\n    const dropdownSelectProps: DropdownSelectProps = {\n        className: 'dropdown-select',\n        disabled: !props.enabled,\n        kind: 'line',\n        onChange: props.onChange,\n        onSelect: props.onChange,\n        value: props.selected,\n    };\n\n    const buttonProps: ButtonProps = {\n        disabled: !props.enabled || props.selected === '',\n        kind: 'filledGreen',\n        onClick: props.onClick,\n        style: { marginLeft: '12px' },\n    };\n\n    return (\n        <div className='selector'>\n            <DropdownSelect {...dropdownSelectProps}>\n                {props.list.map(option => <option key={option}>{option}</option>)}\n            </DropdownSelect>\n            <Button {...buttonProps}>Set</Button>\n        </div>\n    );\n};\n\nSelector.displayName = 'Selector';\n","import * as React from 'react';\nimport { Selected } from './Selected';\nimport { Selector } from './Selector';\n\nexport interface SettingProps {\n    config: boolean;\n    enabled: boolean;\n    list: string[];\n    nextConfig?: boolean;\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n    onClear: () => void;\n    onClick: () => void;\n    selected: string;\n    selecting: string;\n}\n\nexport const Setting: React.SFC<SettingProps> = (props) => {\n    return (\n        <React.Fragment>\n            <span>Select a {props.selecting}</span>\n            {renderSelectElement(props)}\n        </React.Fragment>\n    );\n};\n\nSetting.displayName = 'Setting';\n\nfunction renderSelectElement(props: SettingProps): JSX.Element {\n    const { config, enabled, list, nextConfig, onChange, onClear, onClick, selected, selecting } = props;\n\n    return config ? <Selected nextConfig={nextConfig} onClear={onClear} selected={selected} selecting={selecting} /> :\n        <Selector enabled={enabled} list={list} onChange={onChange} onClick={onClick} selected={selected} />;\n}\n","import * as React from 'react';\nimport { Button, Checkbox, DropdownSelect, Radio, Tabs, TextField } from '@tableau/tableau-ui';\nimport { Setting } from './Setting';\nconst tableau = window.tableau;\n\ninterface State {\n    allLabel: string,\n    applyButton: boolean,\n    applyButtonLabel: string,\n    autoUpdate: boolean,\n    bg: string,\n    configured: boolean,\n    dataType: string,\n    delimiter: string,\n    displayField: string,\n    field: string,\n    field_config: boolean,\n    field_enabled: boolean,\n    field_list: string[],\n    updateOnSelectionFix: boolean,\n    includeAllValue: boolean,\n    listenParam: boolean,\n    listenParamName: string,\n    listenParamList: string[],\n    matchParam: boolean,\n    multiselect: boolean,\n    param_config: boolean,\n    param_enabled: boolean,\n    param_list: string[],\n    parameter: string,\n    selectedTabIndex: number;\n    showDisplayValues: boolean,\n    sort: string,\n    txt: string,\n    updateOnChange: boolean,\n    useFormattedValues: boolean,\n    worksheet: string,\n    ws_config: boolean,\n    ws_enabled: boolean,\n    ws_list: string[],\n}\n\nconst Loading: string = 'Loading...';\nconst NoFieldsFound: string = 'No fields found that match parameter!';\nconst NoWorksheetsFound: string = 'No worksheets found!';\nconst NoParametersFound: string = 'No open input parameters found!';\n\nclass Configure extends React.Component<any, State> {\n    public readonly state: State = {\n        allLabel: '(All)',\n        applyButton: false,\n        applyButtonLabel: 'Apply',\n        autoUpdate: false,\n        bg: '#ffffff',\n        configured: false,\n        dataType: 'string',\n        delimiter: '|',\n        displayField: '',\n        field: '',\n        field_config: false,\n        field_enabled: false,\n        field_list: [],\n        updateOnSelectionFix: false,\n        includeAllValue: false,\n        listenParam: false,\n        listenParamName: '',\n        listenParamList: [],\n        matchParam: false,\n        multiselect: false,\n        param_config: false,\n        param_enabled: false,\n        param_list: [],\n        parameter: '',\n        selectedTabIndex: 0,\n        showDisplayValues: false,\n        sort: 'asc',\n        txt: '#333333',\n        updateOnChange: false,\n        useFormattedValues: false,\n        worksheet: '',\n        ws_config: false,\n        ws_enabled: false,\n        ws_list: [],\n    };\n\n    // Handles change in background color input\n    public bgChange = (color: any): void => {\n        this.setState({ bg: color.target.value });\n    };\n\n    // Handles change in text color input\n    public txtChange = (color: any): void => {\n        this.setState({ txt: color.target.value });\n    };\n\n    // Handles selection in parameter dropdown\n    public paramChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n        this.setState({ parameter: e.target.value }, this.listenParameter);\n    };\n\n    // Handles selection in field dropdown\n    public fieldChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n        this.setState({ field: e.target.value });\n    };\n\n    // Handles selection in worksheet dropdown\n    public wsChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n        this.setState({ worksheet: e.target.value });\n    };\n\n    // Handles change in sort checkbox\n    public sortChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ sort: e.target.value });\n    };\n\n    // Handles change in delimiter textbox\n    public textInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ [e.target.name]: e.target.value } as any);\n    };\n\n    // Handles change in auto update checkbox\n    public checkboxChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ [e.target.name]: e.target.checked } as any);\n    };\n\n    // Handles selection in display values dropdown\n    public listInputChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n        this.setState({ [e.target.name]: e.target.value } as any);\n    };\n\n    // Handles change in options tabs   \n    public tabChange = (index: any): void => {\n        this.setState({ selectedTabIndex: index });\n    };\n\n    // Tests if extension is configured and if so, if the parameter in settings exists and accepts all values\n    public testParamSettings() {\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        const settings = tableau.extensions.settings.getAll();\n        if (this.state.configured) {\n            dashboard.findParameterAsync(settings.selParam).then((param: any) => {\n                if (param && param.allowableValues.type === 'all') {\n                    this.setState({\n                        dataType: param.dataType,\n                        param_config: true,\n                        parameter: param.name,\n                    }, this.listenParameter);\n                    this.testWSSettings();\n                } else {\n                    this.populateParamList();\n                    this.setState({ configured: false });\n                }\n            })\n        } else {\n            this.populateParamList();\n        }\n    }\n\n    // Gets list of parameters in workbook and populates dropdown\n    public populateParamList() {\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        this.setState({\n            param_list: [Loading],\n            parameter: Loading,\n        });\n        dashboard.getParametersAsync().then((params: any) => {\n            const dropdownList: string[] = [];\n            for (const p of params) {\n                if (p.allowableValues.type === 'all') {\n                    dropdownList.push(p.name);\n                }\n            }\n            dropdownList.sort();\n            if (dropdownList.length > 0) {\n                this.setState({\n                    param_enabled: true,\n                    param_list: dropdownList,\n                    parameter: dropdownList[0],\n                }, this.listenParameter);\n            } else {\n                this.setState({\n                    param_enabled: false,\n                    param_list: [NoParametersFound],\n                    parameter: NoParametersFound,\n                });\n            }\n        });\n    }\n\n    // Sets which tableau parameter to update\n    public setParam = (): void => {\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        if (this.state.parameter !== '') {\n            dashboard.findParameterAsync(this.state.parameter).then((param: any) => {\n                this.setState({\n                    dataType: param.dataType,\n                    includeAllValue: (param.dataType === 'string' ? this.state.includeAllValue : false),\n                    multiselect: (param.dataType === 'string' ? this.state.multiselect : false),\n                    param_config: true,\n                });\n                this.populateWS();\n            });\n        }\n    }\n\n    // Clears setting for which tableau parameter to update\n    public clearParam = (): void => {\n        this.setState({\n            param_config: false,\n            param_enabled: true,\n            ws_enabled: false,\n        });\n        this.populateParamList();\n    }\n\n    // Tests if extension is configured and if so, if the worksheet in settings exists\n    public testWSSettings() {\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        const settings = tableau.extensions.settings.getAll();\n        if (this.state.configured) {\n            if (dashboard.worksheets.find((ws: any) => ws.name === settings.selWorksheet)) {\n                this.setState({\n                    worksheet: settings.selWorksheet,\n                    ws_config: true,\n                    ws_enabled: false,\n                });\n                this.testFieldSettings();\n            } else {\n                this.populateWS();\n                this.setState({ configured: false });\n            }\n        } else {\n            this.populateWS();\n        }\n    }\n\n    // Gets list of worksheets in dashboard and populates dropdown\n    public populateWS() {\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        this.setState({\n            worksheet: Loading,\n            ws_list: [Loading],\n        });\n        const dropdownList: string[] = [];\n        for (const ws of dashboard.worksheets) {\n            dropdownList.push(ws.name);\n        }\n        dropdownList.sort();\n        if (dropdownList.length > 0) {\n            this.setState({\n                worksheet: dropdownList[0],\n                ws_enabled: true,\n                ws_list: dropdownList,\n            });\n        } else {\n            this.setState({\n                worksheet: NoWorksheetsFound,\n                ws_enabled: false,\n                ws_list: [NoWorksheetsFound],\n            });\n        }\n    }\n\n    // Sets which worksheet to use for filters\n    public setWS = (): void => {\n        if (this.state.worksheet !== '') {\n            this.setState({ ws_config: true });\n            this.populateFieldList();\n        }\n    }\n\n    // Clears setting for which worksheet to use for filters\n    public clearWS = (): void => {\n        this.setState({\n            field_enabled: false,\n            ws_config: false,\n            ws_enabled: true,\n        });\n        this.populateWS();\n    }\n\n    // Tests if extension is configued and if so, if the field in settings exists on the selected worksheet\n    public testFieldSettings() {\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        const settings = tableau.extensions.settings.getAll();\n        if (this.state.configured) {\n            dashboard.worksheets.find((w: any) => w.name === this.state.worksheet).getSummaryDataAsync().then((dataTable: any) => {\n                if (dataTable.columns.find((column: any) => column.fieldName === settings.selField)) {\n                    const dropdownList: string[] = [];\n                    for (const f of dataTable.columns) {\n                        dropdownList.push(f.fieldName);\n                    }\n                    dropdownList.sort();\n                    this.setState({\n                        configured: true,\n                        field: settings.selField,\n                        field_config: true,\n                        field_enabled: false,\n                        field_list: dropdownList,\n                    });\n                } else {\n                    this.populateFieldList();\n                    this.setState({ configured: false });\n                }\n            });\n        } else {\n            this.populateFieldList();\n        }\n    }\n\n    // Gets list of fields in previously selected worksheet's data and populates dropdown\n    public populateFieldList() {\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        this.setState({\n            field: Loading,\n            field_list: [Loading],\n        });\n        let dataType: string;\n        dashboard.findParameterAsync(this.state.parameter).then((param: any) => {\n            dataType = param.dataType;\n            return dashboard.worksheets.find((w: any) => w.name === this.state.worksheet).getSummaryDataAsync();\n        })\n            .then((dataTable: any) => {\n                const dropdownList: string[] = [];\n                for (const f of dataTable.columns) {\n                    if (f.dataType === dataType) {\n                        dropdownList.push(f.fieldName);\n                    }\n                }\n                dropdownList.sort();\n                if (dropdownList.length > 0) {\n                    this.setState({\n                        field: dropdownList[0],\n                        field_enabled: true,\n                        field_list: dropdownList,\n                    });\n                } else {\n                    this.setState({\n                        field: NoFieldsFound,\n                        field_enabled: false,\n                        field_list: [NoFieldsFound],\n                    });\n                }\n            });\n    }\n\n    // Sets the field to pull values from for Data-Driven Parameter\n    public setField = (): void => {\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        if (this.state.field !== '') {\n            this.setState({\n                configured: true,\n                field_config: true,\n            });\n        }\n\n        // For display values list\n        dashboard.worksheets.find((w: any) => w.name === this.state.worksheet).getSummaryDataAsync().then((dataTable: any) => {\n            const dropdownList: string[] = [];\n            for (const f of dataTable.columns) {\n                dropdownList.push(f.fieldName);\n            }\n            dropdownList.sort();\n            this.setState({\n                displayField: dropdownList[0],\n                field_list: dropdownList,\n            });\n        });\n    }\n\n    // Clears the field to pull values from for Data-Driven Parameter\n    public clearField = (): void => {\n        this.setState({\n            configured: false,\n            field_config: false,\n            field_enabled: true,\n        });\n        this.populateFieldList();\n    }\n\n    // Saves settings and closes configure dialog\n    public submit = (): void => {\n        tableau.extensions.settings.set('allLabel', this.state.allLabel);\n        tableau.extensions.settings.set('applyButton', this.state.applyButton && this.state.multiselect);\n        tableau.extensions.settings.set('applyButtonLabel', this.state.applyButtonLabel);\n        tableau.extensions.settings.set('autoUpdate', this.state.autoUpdate);\n        tableau.extensions.settings.set('bg', this.state.bg);\n        tableau.extensions.settings.set('configured', 'true');\n        tableau.extensions.settings.set('dataType', this.state.dataType || 'string');\n        tableau.extensions.settings.set('delimiter', this.state.delimiter);\n        tableau.extensions.settings.set('displayField', this.state.displayField);\n        tableau.extensions.settings.set('includeAllValue', this.state.includeAllValue && this.state.dataType === 'string');\n        tableau.extensions.settings.set('listenParam', this.state.listenParam);\n        tableau.extensions.settings.set('listenParamName', this.state.listenParamName || '');\n        tableau.extensions.settings.set('matchParam', this.state.matchParam);\n        tableau.extensions.settings.set('multiselect', this.state.multiselect && this.state.dataType === 'string');\n        tableau.extensions.settings.set('selField', this.state.field);\n        tableau.extensions.settings.set('selParam', this.state.parameter);\n        tableau.extensions.settings.set('selWorksheet', this.state.worksheet);\n        tableau.extensions.settings.set('showDisplayValues', this.state.showDisplayValues);\n        tableau.extensions.settings.set('sort', this.state.sort);\n        tableau.extensions.settings.set('txt', this.state.txt);\n        tableau.extensions.settings.set('updateOnChange', this.state.updateOnChange);\n        tableau.extensions.settings.set('updateOnSelectionFix', this.state.updateOnSelectionFix);\n        tableau.extensions.settings.set('useFormattedValues', this.state.useFormattedValues && this.state.dataType === 'string');\n        tableau.extensions.settings.saveAsync().then(() => {\n            tableau.extensions.ui.closeDialog(this.state.worksheet);\n        });\n    }\n\n    // Clears settings and states\n    public clearSettings = (): void => {\n        this.setState({\n            configured: false,\n            displayField: '',\n            field: '',\n            field_config: false,\n            field_enabled: false,\n            field_list: [],\n            param_config: false,\n            param_list: [],\n            parameter: '',\n            showDisplayValues: false,\n            worksheet: '',\n            ws_config: false,\n            ws_enabled: false,\n            ws_list: [],\n        });\n        this.populateParamList();\n    }\n\n    // Grab parameters for options\n    public listenParameter() {\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        dashboard.getParametersAsync().then((params: any) => {\n            const dropdownList: string[] = [];\n            for (const p of params) {\n                if (p.name !== this.state.parameter) {\n                    dropdownList.push(p.name);\n                }\n            }\n            dropdownList.sort();\n\n            this.setState({\n                listenParamList: dropdownList,\n                listenParamName: dropdownList.includes(this.state.listenParamName) ? this.state.listenParamName : dropdownList[0]\n            });\n        });\n    }\n\n    // Once we have mounted, we call to initialize\n    public componentWillMount() {\n        tableau.extensions.initializeDialogAsync().then(() => {\n            const settings = tableau.extensions.settings.getAll();\n            if (settings.configured === 'true') {\n                this.setState({\n                    allLabel: settings.allLabel || '(All)',\n                    applyButton: settings.applyButton === 'true' || false,\n                    applyButtonLabel: settings.applyButtonLabel || 'Apply',\n                    autoUpdate: settings.autoUpdate === 'true' || false,\n                    bg: settings.bg || '#ffffff',\n                    configured: true,\n                    dataType: settings.dataType,\n                    delimiter: settings.delimiter || '|',\n                    displayField: settings.displayField || '',\n                    includeAllValue: settings.includeAllValue === 'true' || false,\n                    listenParam: settings.listenParam === 'true' || false,\n                    listenParamName: settings.listenParamName || '',\n                    matchParam: settings.matchParam === 'true' || false,\n                    multiselect: settings.multiselect === 'true' || false,\n                    showDisplayValues: settings.showDisplayValues === 'true' || false,\n                    sort: settings.sort || 'asc',\n                    txt: settings.txt || '#333333',\n                    updateOnChange: settings.updateOnChange === 'true' || false,\n                    updateOnSelectionFix: settings.updateOnSelectionFix ? settings.updateOnSelectionFix === 'true' || false : true,\n                    useFormattedValues: settings.useFormattedValues === 'true' || false,\n                });\n                this.testParamSettings();\n            } else {\n                this.populateParamList();\n            }\n        });\n    }\n\n    public render() {\n        const configuration = <div className='content'>\n            <Setting selecting='parameter' onClick={this.setParam} onClear={this.clearParam} config={this.state.param_config} nextConfig={this.state.ws_config} selected={this.state.parameter} enabled={this.state.param_enabled && !this.state.param_config} list={this.state.param_list} onChange={this.paramChange} />\n            <Setting selecting='worksheet' onClick={this.setWS} onClear={this.clearWS} config={this.state.ws_config} nextConfig={this.state.field_config} selected={this.state.worksheet} enabled={this.state.ws_enabled} list={this.state.ws_list} onChange={this.wsChange} />\n            <Setting selecting='field' onClick={this.setField} onClear={this.clearField} config={this.state.field_config} selected={this.state.field} enabled={this.state.field_enabled} list={this.state.field_list} onChange={this.fieldChange} />\n        </div>;\n\n        const options = <div className='content'>\n            <div className='option'>\n                Sorting:\n                <Radio checked={this.state.sort === 'asc'} onChange={this.sortChange} name='sorting' value='asc' style={{ margin: '0px 12px' }}>Ascending (A-Z)</Radio>\n                <Radio checked={this.state.sort === 'desc'} onChange={this.sortChange} name='sorting' value='desc' style={{ margin: '0px 12px' }}>Descending (Z-A)</Radio>\n            </div>\n            <div className='option'>\n                <Checkbox name='updateOnSelectionFix' checked={this.state.updateOnSelectionFix} onChange={this.checkboxChange} style={{ flexGrow: 1 }}>Filter list based on worksheet selections</Checkbox>\n            </div>\n            <div className='option'>\n                <Checkbox name='autoUpdate' checked={this.state.autoUpdate} onChange={this.checkboxChange} style={{ flexGrow: 1 }}>Automatically reset values on dashboard load.</Checkbox>\n            </div>\n            <div className='option'>\n                <Checkbox name='updateOnChange' disabled={this.state.multiselect} checked={this.state.updateOnChange} onChange={this.checkboxChange} style={{ flexGrow: 1 }}>Update list of values after selection is made. (Dropdown only)</Checkbox>\n            </div>\n            <div className='option'>\n                <Checkbox name='matchParam' checked={this.state.matchParam} onChange={this.checkboxChange} style={{ flexGrow: 1 }}>Update selection if source parameter changes.</Checkbox>\n            </div>\n            <div className='option'>\n                <Checkbox name='listenParam' disabled={!this.state.param_config} checked={this.state.listenParam} onChange={this.checkboxChange} style={{ marginRight: '10px' }}>Update list when a parameter changes.</Checkbox>\n                <div style={{ display: 'flex', width: '150px' }}>\n                    <DropdownSelect name='listenParamName' className='dropdown-select' disabled={!this.state.listenParam || !this.state.param_config} kind='line' onChange={this.listInputChange} value={this.state.listenParamName} style={{ flexGrow: 1 }}>\n                        {this.state.listenParamList.map(option => <option key={option}>{option}</option>)}\n                    </DropdownSelect>\n                </div>\n            </div>\n            <div className='option'>\n                <Checkbox name='showDisplayValues' disabled={!this.state.field_config} checked={this.state.showDisplayValues} onChange={this.checkboxChange} style={{ marginRight: '10px' }}>Use different field for display values</Checkbox>\n                <div style={{ display: 'flex', width: '150px' }}>\n                    <DropdownSelect name='displayField' className='dropdown-select' disabled={!this.state.showDisplayValues || !this.state.field_config} kind='line' onChange={this.listInputChange} value={this.state.displayField} style={{ flexGrow: 1 }}>\n                        {this.state.field_list.map(option => <option key={option}>{option}</option>)}\n                    </DropdownSelect>\n                </div>\n            </div>\n            <div className='option'>\n                <p><i>For use with string parameters only:</i></p>\n            </div>\n            <div className='option'>\n                <Checkbox name='useFormattedValues' disabled={this.state.dataType !== 'string'} checked={this.state.useFormattedValues && this.state.dataType === 'string'} onChange={this.checkboxChange} style={{ flexGrow: 1 }}>Use aliased values</Checkbox>\n            </div>\n            <div className='option'>\n                <Checkbox name='includeAllValue' disabled={this.state.dataType !== 'string'} checked={this.state.includeAllValue && this.state.dataType === 'string'} onChange={this.checkboxChange} style={{ marginRight: '10px' }}>Include \"(All)\" in parameter list</Checkbox>\n                <span children='Label:' style={{ marginRight: '5px', color: this.state.dataType !== 'string' || !this.state.includeAllValue ? 'rgba(0, 0, 0, 0.35)' : 'inherit' }} />\n                <TextField name='allLabel' kind='line' onChange={this.textInputChange} className='delimiter-text-field' value={this.state.allLabel} disabled={this.state.dataType !== 'string' || !this.state.includeAllValue} maxLength={20} style={{ width: 150 }} />\n\n            </div>\n            <p style={{ marginLeft: '20px' }}><i>Note: This is only a placeholder for calculations.</i></p>\n            <div className='option'>\n                <Checkbox name='multiselect' disabled={this.state.dataType !== 'string'} checked={this.state.multiselect && this.state.dataType === 'string'} onChange={this.checkboxChange} style={{ marginRight: '10px' }}>Allow for multiple selections.</Checkbox>\n                <span children='Delimiter:' style={{ marginRight: '5px', color: !this.state.multiselect ? 'rgba(0, 0, 0, 0.35)' : 'inherit' }} />\n                <TextField name='delimiter' kind='line' onChange={this.textInputChange} className='delimiter-text-field' value={this.state.delimiter} disabled={!this.state.multiselect || this.state.dataType !== 'string'} maxLength={1} style={{ width: 20 }} />\n            </div>\n            <div className='option'>\n                <Checkbox name='applyButton' disabled={!this.state.multiselect} checked={this.state.applyButton && this.state.multiselect} onChange={this.checkboxChange} style={{ marginRight: '10px' }}>Show apply button.</Checkbox>\n                <span children='Label:' style={{ marginRight: '5px', color: !this.state.multiselect || !this.state.applyButton ? 'rgba(0, 0, 0, 0.35)' : 'inherit' }} />\n                <TextField name='applyButtonLabel' kind='line' onChange={this.textInputChange} className='delimiter-text-field' value={this.state.applyButtonLabel} disabled={!this.state.multiselect || !this.state.applyButton} maxLength={20} style={{ width: 150 }} />\n            </div>\n        </div>;\n\n        const formatting = <div className='content'>\n            <div className='format'>\n                <div className='formattext'>Background Color</div>\n                <div>\n                    <input type='color' value={this.state.bg} onChange={this.bgChange} style={{ backgroundColor: this.state.bg }} />\n                </div>\n            </div>\n            <div className='format'>\n                <div className='formattext'>Text Color</div>\n                <div>\n                    <input type='color' value={this.state.txt} onChange={this.txtChange} style={{ backgroundColor: this.state.txt }} />\n                </div>\n            </div>\n        </div>;\n\n        const panels = [configuration, options, formatting];\n        const tabs = [{ content: 'Configure' }, { content: 'Options' }, { content: 'Formatting' }];\n        // const initialState = { selectedTabIndex: 0 };\n\n        return (\n            <React.Fragment>\n                <div className='container'>\n                    <div>\n                        <div className='header'>\n                            Data-Driven Parameter Configuration\n                            <div className='tooltip'>\n                                <svg xmlns='http://www.w3.org/2000/svg' id='Dialogs_x5F_Info' width='15' height='15' viewBox='0 0 15 15'>\n                                    <rect id='Line' x='7' y='6' width='1' height='5' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\n                                    <rect id='Dot_2_' x='7' y='4' width='1' height='1' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\n                                    <path id='Circle' d='M7.5,1C3.9,1,1,3.9,1,7.5S3.9,14,7.5,14 S14,11.1,14,7.5S11.1,1,7.5,1z M7.5,13C4.5,13,2,10.5,2,7.5C2,4.5,4.5,2,7.5,2S13,4.5,13,7.5C13,10.5,10.5,13,7.5,13z' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\n                                </svg>\n                                <span className='tooltiptext'>\n                                    <b>How to Use</b>\n                                    <ol>\n                                        <li>Select a Tableau parameter to manipulate. This parameter must already exists and must allow \"all\" values.</li>\n                                        <li>Select a worksheet with the data you want to use in your parameter.</li>\n                                        <li>Select a field to use to populate the parameter. Field data type must match the data type of parameter.</li>\n                                    </ol>\n                                    <br />\n                                    <p>Note: Mac Desktop 2018.3 and lower, please use arrow keys and 'Enter' to select options</p>\n                                </span>\n                            </div>\n                        </div>\n                        <div className='tabs'>\n                            <Tabs activation='automatic' alignment='left' onTabChange={this.tabChange} selectedTabIndex={this.state.selectedTabIndex} tabs={tabs}>\n                                {panels[this.state.selectedTabIndex]}\n                            </Tabs>\n                        </div>\n                    </div>\n\n                    <div className='footer'>\n                        <div className='btncluster'>\n                            <Button onClick={this.clearSettings} style={{ marginRight: 'auto' }}>Clear Settings</Button>\n                            <Button kind='filledGreen' onClick={this.submit} disabled={!this.state.configured || !this.state.ws_config} style={{ marginLeft: '12px' }}>OK</Button>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Configure;\n","import * as React from 'react';\nimport './style.css';\nimport { Button, DropdownSelect } from '@tableau/tableau-ui';\nconst tableau = window.tableau;\n\nlet unregister = [() => { }, () => { }, () => { }, () => { }];\n\ninterface State {\n    allLabel: string,\n    applyButton: boolean,\n    applyButtonLabel: string,\n    bg: string,\n    configured: boolean,\n    currentVal: any[],\n    disabled: boolean,\n    firstInit: boolean,\n    list: any[],\n    multiselect: boolean,\n}\n\nconst NeedsConfiguring: any = { value: 'Parameter needs configuration', displayValue: 'Parameter needs configuration' };\nconst Loading: any = { value: 'Loading...', displayValue: 'Loading...' };\n\nfunction fakeWhiteOverlay(hex: string) {\n    const rgb = hexToRgb(hex);\n    if (rgb) {\n        return `rgb(${Math.min(Math.floor(rgb.r / 2) + 127, 255)}, ${Math.min(Math.floor(rgb.g / 2) + 127, 255)}, ${Math.min(Math.floor(rgb.b / 2) + 127, 255)})`;\n    } else {\n        return '#ffffff';\n    }\n}\n\nfunction hexToRgb(hex: string) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        b: parseInt(result[3], 16),\n        g: parseInt(result[2], 16),\n        r: parseInt(result[1], 16),\n    } : null;\n}\n\nclass DataDrivenParameter extends React.Component<any, State> {\n    public readonly state: State = {\n        allLabel: 'Apply',\n        applyButton: false,\n        applyButtonLabel: '(All)',\n        bg: '#ffffff',\n        configured: false,\n        currentVal: [Loading],\n        disabled: true,\n        firstInit: true,\n        list: [Loading],\n        multiselect: false,\n    };\n\n    // Pops open the configure page\n    public configure = (): void => {\n        const popupUrl = `${window.location.origin}${process.env.PUBLIC_URL}/#/config`;\n        const payload = '';\n        tableau.extensions.ui.displayDialogAsync(popupUrl, payload, { height: 610, width: 450 }).then((closePayload: string) => {\n            this.setup();\n        }).catch((error: any) => {\n            if (tableau.extensions.settings.get('configured') !== 'true') {\n                this.setState({\n                    currentVal: [NeedsConfiguring],\n                    disabled: true,\n                    list: [NeedsConfiguring],\n                });\n            }\n            switch (error.errorCode) {\n                case tableau.ErrorCodes.DialogClosedByUser:\n                    console.log('Dialog was closed by user.');\n                    break;\n                default:\n                    console.error(error.message);\n            }\n        });\n    }\n\n    // Locates the parameter to update\n    public findParameter() {\n        const settings = tableau.extensions.settings.getAll();\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        dashboard.findParameterAsync(settings.selParam).then((parameter: any) => {\n            if (!parameter || parameter.allowableValues.type !== 'all') {\n                this.setState({\n                    currentVal: [NeedsConfiguring],\n                    disabled: true,\n                    list: [NeedsConfiguring],\n                });\n            } else {\n                this.getParamData();\n                this.resetListeners();\n            }\n        });\n    }\n\n    // Gets the values from the selected field\n    public getParamData = (): void => {\n        const settings = tableau.extensions.settings.getAll();\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        const worksheet = dashboard.worksheets.find((ws: any) => ws.name === settings.selWorksheet);\n        if (!worksheet) {\n            this.setState({\n                currentVal: [NeedsConfiguring],\n                disabled: true,\n                list: [NeedsConfiguring],\n            });\n        } else {\n            worksheet.getSummaryDataAsync({ ignoreSelection: settings.ignoreSelection === 'true' }).then((dataTable: any) => {\n                this.populateParam(dataTable);\n            });\n        }\n    }\n\n    // Pulls domain of selected field\n    public populateParam(dataTable: any) {\n        const settings = tableau.extensions.settings.getAll();\n        const field = dataTable.columns.find((column: any) => column.fieldName === settings.selField);\n        this.setState({\n            currentVal: [Loading],\n            disabled: true,\n            list: [Loading],\n        });\n\n        if (!field) {\n            this.setState({\n                currentVal: [NeedsConfiguring],\n                disabled: true,\n                list: [NeedsConfiguring],\n            });\n        } else {\n            this.createList(field, dataTable);\n        }\n    }\n\n    // Populate list with values from data source\n    public createList(field: any, dataTable: any) {\n        const settings = tableau.extensions.settings.getAll();\n        const displayField = dataTable.columns.find((column: any) => column.fieldName === settings.displayField);\n\n        let list: any[] = [];\n        for (const row of dataTable.data) {\n            const value = settings.useFormattedValues === 'true' ? row[field.index].formattedValue : row[field.index].value;\n            let displayValue = value;\n            if (displayField && settings.showDisplayValues === 'true') {\n                displayValue = row[displayField.index].formattedValue\n            }\n            list.push({\n                displayValue,\n                value,\n            });\n        }\n\n        // Remove duplicates\n        list = list.filter((item, index, array) => array.indexOf(array.find(i => i.value === item.value)) === index);\n\n        if (settings.dataType && (settings.dataType === 'int' || settings.dataType === 'float')) {\n            // Convert to numbers for correct sort\n            list = list.map((item) => ({ value: Number(item.value), displayValue: item.displayValue }))\n            // Sort according to settings (numerical)\n            if (settings.sort && settings.sort === 'desc') {\n                list.sort((a, b) => b.value - a.value);\n            } else {\n                list.sort((a, b) => a.value - b.value);\n            }\n            if (settings.dataType === 'float') {\n                list = list.map((item) => ({ value: item.value.toLocaleString(tableau.extensions.environment.locale), displayValue: item.displayValue }));\n            }\n        } else {\n            // Sort according to settings\n            if (settings.sort && settings.sort === 'desc') {\n                list.sort((a, b) => a.value < b.value ? 1 : -1);\n            } else {\n                list.sort((a, b) => a.value > b.value ? 1 : -1);\n            }\n        }\n\n        // Add '(All)' according to settings\n        if (settings.includeAllValue === 'true') {\n            list.unshift({ value: this.state.allLabel, displayValue: this.state.allLabel });\n        }\n\n        this.setState({\n            list,\n        }, this.setCurrentValue);\n\n    }\n\n    // Determine whether to use current param value or first value of list based on settings\n    public setCurrentValue = (): void => {\n        const settings = tableau.extensions.settings.getAll();\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        const list = this.state.list;\n        let currentVal: any[] = [];\n        dashboard.findParameterAsync(settings.selParam).then((parameter: any) => {\n            if ((this.state.firstInit && settings.autoUpdate === 'true')) {\n                // Then push new values\n                currentVal = [(settings.includeAllValue === 'true' ? list[1].value : list[0].value)];\n            } else {\n                // Then match parameter value\n                if (settings.multiselect === 'true') {\n                    const tablist = [];\n                    for (const value of parameter.currentValue.value.split(settings.delimiter)) {\n                        if (list.find((v: any) => v.value.toString() === value || v.value === value)) {\n                            tablist.push(value);\n                        }\n                    }\n                    currentVal = tablist;\n                } else {\n                    if (list.find((v: any) => v.value.toString() === parameter.currentValue.value || v.value === parameter.currentValue.value)) {\n                        currentVal = [parameter.currentValue.value];\n                    }\n                }\n                if (currentVal.length === 0) {\n                    // If no match, use first value\n                    currentVal = [(settings.includeAllValue === 'true' ? list[1].value : list[0].value)];\n                }\n            }\n\n            parameter.changeValueAsync(settings.multiselect ? currentVal.join(settings.delimiter) : currentVal.toString()).then(console.log);\n\n            this.setState({\n                disabled: false,\n                firstInit: false,\n                currentVal\n            });\n        });\n    }\n\n    // Adds event listener to worksheet and parameter\n    public async registerListeners() {\n        const settings = tableau.extensions.settings.getAll();\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        const worksheet = dashboard.worksheets.find((ws: any) => ws.name === settings.selWorksheet);\n        dashboard.findParameterAsync(settings.selParam).then((parameter: any) => {\n            if (!worksheet || !parameter) {\n                this.setState({\n                    currentVal: [NeedsConfiguring],\n                    disabled: true,\n                    list: [NeedsConfiguring],\n                });\n            } else {\n                if (!settings.updateOnSelectionFix || settings.updateOnSelectionFix === 'true') {\n                    unregister[0] = worksheet.addEventListener(tableau.TableauEventType.FilterChanged, this.getParamData);\n                    unregister[1] = worksheet.addEventListener(tableau.TableauEventType.MarkSelectionChanged, this.getParamData);\n                }\n                if (settings.matchParam === 'true') {\n                    unregister[2] = parameter.addEventListener(tableau.TableauEventType.ParameterChanged, this.matchListener);\n                }\n                if (settings.listenParam === 'true') {\n                    dashboard.findParameterAsync(settings.listenParamName).then((updateParameter: any) => {\n                        unregister[3] = updateParameter.addEventListener(tableau.TableauEventType.ParameterChanged, this.getParamData);\n                    })\n                }\n            }\n        });\n    }\n\n    public matchListener = (): void => {\n        const settings = tableau.extensions.settings.getAll();\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        dashboard.findParameterAsync(settings.selParam).then((parameter: any) => {\n            const currentVal = this.state.multiselect ? parameter.currentValue.value.split(settings.delimiter) : [parameter.currentValue.value];\n            this.setState({\n                currentVal,\n            });\n        });\n    }\n\n    public resetListeners() {\n        for (let fn of unregister) {\n            fn();\n        }\n        this.registerListeners();\n    }\n\n    // Updates the parameter based on selection in Data-Driven Parameter\n    public updateParam = (e: any) => {\n        const settings = tableau.extensions.settings.getAll();\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        const values: any = [];\n        let newValue: any;\n        for (const opt of e.target.options) {\n            if (opt.selected) {\n                values.push(opt.value);\n            }\n        }\n        this.setState({ currentVal: values });\n        newValue = values.join(settings.delimiter);\n        dashboard.findParameterAsync(settings.selParam).then((parameter: any) => {\n            if (!parameter) {\n                this.setState({\n                    currentVal: [NeedsConfiguring],\n                    disabled: true,\n                    list: [NeedsConfiguring],\n                });\n            } else {\n                if (settings.applyButton === 'false') {\n                    parameter.changeValueAsync(newValue).then(console.log);\n                }\n            }\n\n            if (settings.updateOnChange === 'true') {\n                // Don't update list if on multi-select, ends up being confusing.\n                if (!this.state.multiselect) {\n                    this.getParamData();\n                }\n            }\n        });\n    }\n\n    public apply = (): void => {\n        const settings = tableau.extensions.settings.getAll();\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\n        dashboard.findParameterAsync(settings.selParam).then((parameter: any) => {\n            parameter.changeValueAsync(this.state.currentVal.join(settings.delimiter)).then(console.log);\n        });\n    }\n\n    public setup() {\n        const settings = tableau.extensions.settings.getAll();\n        document.body.style.backgroundColor = settings.bg;\n        document.body.style.color = settings.txt;\n        this.setState({\n            allLabel: settings.allLabel || '(All)',\n            applyButton: settings.applyButton === 'true' || false,\n            applyButtonLabel: settings.applyButtonLabel || 'Apply',\n            bg: (settings.bg ? fakeWhiteOverlay(settings.bg) : '#ffffff'),\n            configured: true,\n            multiselect: settings.multiselect === 'true' || false,\n        });\n        this.findParameter();\n    }\n\n    // Once we have mounted, we call to initialize\n    public componentWillMount() {\n        tableau.extensions.initializeAsync({ configure: this.configure }).then(() => {\n            const settings = tableau.extensions.settings.getAll();\n            if (settings.configured === 'true') {\n                this.setup();\n            } else {\n                this.setState({\n                    currentVal: [NeedsConfiguring],\n                    disabled: true,\n                    list: [NeedsConfiguring],\n                });\n                this.configure();\n            }\n        });\n    }\n\n    public render() {\n        const multi = <div style={{ flexDirection: 'column' }}>\n            <select multiple={true} id='multi-select-parameter' className='parameter' value={this.state.currentVal} onChange={this.updateParam} disabled={this.state.disabled} style={{ backgroundColor: this.state.bg, color: 'inherit' }}>\n                {this.state.list.map((option: any) => (<option key={option.value || option.value} value={option.value}>{option.displayValue}</option>))}\n            </select>\n            <Button kind='filled' onClick={this.apply} style={{ display: (this.state.applyButton ? 'block' : 'none'), marginTop: '6px', width: '60px', height: '20px', marginLeft: 'auto' }}>{this.state.applyButtonLabel}</Button>\n        </div>\n\n        const single = <div>\n            <DropdownSelect id='single-select-parameter' className='singleParameter' disabled={this.state.disabled || this.state.multiselect} kind='outline' onChange={this.updateParam} value={this.state.currentVal[0]} style={{ backgroundColor: this.state.bg, color: 'inherit', fontSize: '11px' }}>\n                {this.state.list.map((option: any) => <option key={option.value} value={option.value}>{option.displayValue}</option>)}\n            </DropdownSelect>\n        </div>\n\n        return (\n            <>\n                {this.state.multiselect ? multi : single}\n            </>\n        );\n    }\n}\n\nexport default DataDrivenParameter;\n","import * as React from 'react';\nimport './home.css';\n\nclass Home extends React.Component<any, any> {\n    public render() {\n        return (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className='icontainer'>\n\t\t\t\t\t<div className='box'>\n\t\t\t\t\t\t<div className='left'>\n\t\t\t\t\t\t\t<h1 className='iheader'>Data-Driven Parameters</h1>\n\t\t\t\t\t\t\t<span className='tagline'>Automatically update your parameters based on your data!</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='right'>\n\t\t\t\t\t\t\t<h4 className='big'>What is it?</h4>\n\t\t\t\t\t\t\t<p>This extension allows you to add a parameter to a Tableau dashboard whose domain is based on your data. Added a new product line? No longer do you need to manually edit the parameter to update it, with this extension your parameter values\n\t\t\t\t\t\t\tupdate automatically!</p>\n\t\t\t\t\t\t\t<h4 className='big'>Using the Extension</h4>\n\t\t\t\t\t\t\t<ol>\n\t\t\t\t\t\t\t\t<li>Create an open input (All) parameter with a data type matching the field you want to use to populate it.</li>\n\t\t\t\t\t\t\t\t<li>Drag in a new Extension object to your dashboard.</li>\n\t\t\t\t\t\t\t\t<li>Find the manifest (.trex) file you downloaded above.</li>\n\t\t\t\t\t\t\t\t<li>Select the parameter you created above for the extension to manipulate.</li>\n\t\t\t\t\t\t\t\t<li>Select the worksheet that holds the field you want to base your parameter on.</li>\n\t\t\t\t\t\t\t\t<li>Select the field you want to base your parameter on.</li>\n\t\t\t\t\t\t\t\t<li>Optional: Configure your text and background colors.</li>\n\t\t\t\t\t\t\t\t<li>Click 'OK'.</li>\n\t\t\t\t\t\t\t</ol>\n\t\t\t\t\t\t\t<p><b>Note:</b> You can add as many instances of this extension as you like!</p>\n\t\t\t\t\t\t\t<div className='gh'>\n\t\t\t\t\t\t\t\tGet this extension and more in the <a href='https://extensiongallery.tableau.com/'>Extension Gallery</a>.\n\t\t\t\t\t\t\t\t{/* <a href='https://github.com/tableau/extension-data-driven-parameters'>View on GitHub</a> */}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n        );\n    }\n}\n\nexport default Home;","import 'react-app-polyfill/ie11';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Configure from './Configure';\nimport DataDrivenParameter from './DataDrivenParameter';\nimport Home from './Home';\n\ndeclare global {\n  interface Window { tableau: any; }\n}\n\nconst PrimaryLayout = () => (\n  <React.Fragment>\n    <Route path='/' exact={true} component={Home} />\n    <Route path='/parameter' component={DataDrivenParameter} />\n    <Route path='/config' component={Configure} />\n  </React.Fragment>\n)\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <HashRouter>\n        <PrimaryLayout />\n      </HashRouter>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n"],"sourceRoot":""}